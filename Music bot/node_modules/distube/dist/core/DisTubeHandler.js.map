{"version":3,"file":"DisTubeHandler.js","sourceRoot":"","sources":["../../src/core/DisTubeHandler.ts"],"names":[],"mappings":";;;;;;AAAA,mEAAsC;AACtC,yDAAiC;AACjC,wBAA+C;AAC/C,0BAUY;AAGZ,kCAAmC;AACnC;;;;GAIG;AACH,MAAa,cAAe,SAAQ,cAAW;IAC7C,YAAY,OAAgB;QAC1B,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;YAC9B,MAAM,cAAc,GAAQ;gBAC1B,OAAO,EAAE;oBACP,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;iBACnC;aACF,CAAC;YACF,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;gBACrC,cAAc,CAAC,OAAO,CAAC,0BAA0B,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;aACxF;YACD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;SACrD;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;YAC7B,MAAM,CAAC,EAAE,CAAC,kBAAkB,EAAE,QAAQ,CAAC,EAAE;gBACvC,IAAI,CAAC,QAAQ,EAAE,OAAO;oBAAE,OAAO;gBAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAI,CAAC,KAAK,EAAE;oBACV,IAAI,IAAA,uBAAmB,EAAC,QAAQ,CAAC,EAAE;wBACjC,UAAU,CAAC,GAAG,EAAE;4BACd,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAA,uBAAmB,EAAC,QAAQ,CAAC;gCAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAC/F,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;qBAC9C;oBACD,OAAO;iBACR;gBACD,IAAI,KAAK,CAAC,YAAY,EAAE;oBACtB,YAAY,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;oBACjC,OAAO,KAAK,CAAC,YAAY,CAAC;iBAC3B;gBACD,IAAI,IAAA,uBAAmB,EAAC,QAAQ,CAAC,EAAE;oBACjC,KAAK,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,EAAE;wBACnC,OAAO,KAAK,CAAC,YAAY,CAAC;wBAC1B,IAAI,IAAA,uBAAmB,EAAC,QAAQ,CAAC,EAAE;4BACjC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;4BACpB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;4BAC1B,IAAI,KAAK,CAAC,OAAO;gCAAE,KAAK,CAAC,MAAM,EAAE,CAAC;yBACnC;oBACH,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;iBAC9C;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;IAClC,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,WAAW,CACf,OAA0C,EAC1C,IAAmB,EACnB,WAAmC;QAEnC,OAAO,CAAC,WAAW,CACjB,4EAA4E,EAC5E,oBAAoB,CACrB,CAAC;QACF,IAAI,KAAoC,CAAC;QACzC,IAAI,IAAA,qBAAiB,EAAC,OAAO,CAAC,EAAE;YAC9B,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC;YAC9B,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,IAAI,SAAS,CAAC;SACrD;aAAM;YACL,KAAK,GAAG,OAAO,CAAC;SACjB;QACD,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,gBAAY,CAAC,cAAc,CAAC,CAAC;QACnD,IAAI,CAAC,IAAA,2BAAuB,EAAC,KAAK,CAAC;YAAE,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC5G,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;IACtD,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,GAAW,EAAE,KAAK,GAAG,KAAK;QACvC,IAAI,KAAK;YAAE,OAAO,mBAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3D,OAAO,mBAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,WAAW,CACf,IAAkG,EAClG,UAGI,EAAE;QAEN,IAAI,IAAI,YAAY,QAAI,IAAI,IAAI,YAAY,YAAQ,EAAE;YACpD,IAAI,UAAU,IAAI,OAAO;gBAAE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAC5D,IAAI,QAAQ,IAAI,OAAO;gBAAE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YACtD,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,YAAY,gBAAY,EAAE;YAChC,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO;gBAAE,OAAO,IAAI,QAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SAChD;QACD,IAAI,IAAA,eAAQ,EAAC,IAAI,CAAC;YAAE,OAAO,IAAI,QAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACnD,IAAI,mBAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,QAAI,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;QACtF,IAAI,IAAA,SAAK,EAAC,IAAI,CAAC,EAAE;YACf,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;gBAClD,IAAI,MAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aACvE;YACD,MAAM,IAAI,gBAAY,CAAC,mBAAmB,CAAC,CAAC;SAC7C;QACD,MAAM,IAAI,gBAAY,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,eAAe,CACnB,QAAoC,EACpC,UAII,EAAE;QAEN,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,CAAC;QACvE,IAAI,QAAQ,YAAY,YAAQ,EAAE;YAChC,IAAI,QAAQ;gBAAE,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAChD,IAAI,MAAM;gBAAE,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAC1C,OAAO,QAAQ,CAAC;SACjB;QACD,IAAI,gBAAsC,CAAC;QAC3C,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,gBAAgB,GAAG,MAAM,IAAA,cAAI,EAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC5D,gBAAwB,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK;iBACrD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;iBAClD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,QAAI,CAAC,CAAkB,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;SACjE;aAAM;YACL,gBAAgB,GAAG,QAAQ,CAAC;SAC7B;QACD,OAAO,IAAI,YAAQ,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IACtF,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,oBAAoB,CACxB,OAAoC,EACpC,KAAuC,EACvC,aAAkB,EAAE,EACpB,QAAQ,GAAG,IAAI,EACf,QAAc;QAEd,OAAO,CAAC,WAAW,CACjB,8FAA8F,EAC9F,oBAAoB,CACrB,CAAC;QACF,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,KAAK,EAAE;YAC9C,MAAM,EAAG,OAAyB,CAAC,MAAM,IAAK,OAAuB;YACrE,UAAU;YACV,QAAQ;YACR,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;IAgCD,KAAK,CAAC,cAAc,CAClB,KAAwB,EACxB,QAAkB,EAClB,UAKI,EAAE;QAEN,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,CAAC;QAEnF,IAAI,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,IAAI,IAAI,QAAQ,KAAK,CAAC;gBAAE,QAAQ,GAAG,CAAC,CAAC;;gBACpC,QAAQ,GAAG,CAAC,CAAC;SACnB;QACD,IAAI,OAAO;YAAE,QAAQ,GAAG,CAAC,CAAC;QAE1B,IAAI,CAAC,CAAC,QAAQ,YAAY,YAAQ,CAAC;YAAE,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC9G,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAE,WAA2B,EAAE,IAAI,EAAE;YAC7D,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;SAChE;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAE,WAA2B,EAAE,IAAI;gBAAE,MAAM,IAAI,gBAAY,CAAC,yBAAyB,CAAC,CAAC;YACjH,MAAM,IAAI,gBAAY,CAAC,gBAAgB,CAAC,CAAC;SAC1C;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAClC,IAAI,IAAI;gBAAE,KAAK,CAAC,IAAI,EAAE,CAAC;;gBAClB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC5C;aAAM;YACL,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;YACrE,IAAI,QAAQ,YAAY,SAAK,EAAE;gBAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,4BAA4B;oBAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBACxF,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACpD;SACF;IACH,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,UAAU,CAAC,OAAsB,EAAE,KAAa;QACpD,IAAI,CAAC,IAAA,qBAAiB,EAAC,OAAO,CAAC;YAAE,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,iBAAiB,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAC/G,IAAI,OAAO,KAAK,KAAK,QAAQ;YAAE,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAChG,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;YAAE,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACxE,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO;aAC/B,MAAM,CAAC,KAAK,EAAE;YACb,KAAK;YACL,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,OAAO,CAAC,OAAuB,EAAE,IAAI;SAChF,CAAC;aACD,KAAK,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE;gBAChD,sCAAsC;gBACtC,OAAO,CAAC,IAAI,CAAC,gFAAgF,CAAC,CAAC;gBAC/F,MAAM,IAAI,gBAAY,CAAC,WAAW,CAAC,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;QACL,IAAI,CAAC,OAAO;YAAE,OAAO,IAAI,CAAC;QAC1B,OAAO,IAAI,CAAC,4BAA4B,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,4BAA4B,CAChC,OAAsB,EACtB,OAAiB,EACjB,KAAc;QAEd,IAAI,CAAC,IAAA,qBAAiB,EAAC,OAAO,CAAC;YAAE,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,iBAAiB,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAC/G,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;YAClD,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,mCAAmC,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;SACjG;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;YAChC,MAAM,YAAY,GAAG;gBACnB,gBAAgB;gBAChB,cAAc;gBACd,cAAc;gBACd,qBAAqB;gBACrB,YAAY;aACJ,CAAC;YACX,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;gBAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACzC,+BAA+B;oBAC/B,OAAO,CAAC,IAAI,CAAC,oDAAoD,GAAG,aAAa,CAAC,CAAC;oBACnF,OAAO,CAAC,IAAI,CACV,6BAA6B,GAAG,4DAA4D;wBAC1F,iBAAiB,GAAG,cAAc,CACrC,CAAC;oBACF,8BAA8B;oBAC9B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC;iBAC9B;aACF;SACF;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;YAC1B,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC;gBACjD,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;oBACd,MAAM,EAAE,CAAC,CAAU,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,OAAO,CAAC,MAAM,CAAC,EAAE;oBACzD,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,GAAG;oBACvC,MAAM,EAAE,CAAC,MAAM,CAAC;iBACjB,CAAC;gBACJ,CAAC,CAAE,CAAC,CAAC,aAAqB,CAAC,CAAC,CAAU,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE;oBAC1E,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,GAAG;oBACvC,MAAM,EAAE,CAAC,MAAM,CAAC;iBACjB,CAAC,CACL,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;YACzB,MAAM,GAAG,GAAG,OAAO,EAAE,KAAK,EAAE,CAAC;YAC7B,IAAI,CAAC,GAAG,EAAE;gBACR,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;gBAC1C,OAAO,IAAI,CAAC;aACb;YACD,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACxC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,EAAE;gBACvD,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;gBACtD,OAAO,IAAI,CAAC;aACb;YACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;SAC7B;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,KAAY;QACvB,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxE,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAuB,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClG,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACrF,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QACpD,MAAM,aAAa,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;QACnD,IAAI,MAAM,KAAK,SAAS;YAAE,OAAO,gBAAa,CAAC,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/E,OAAO,gBAAa,CAAC,UAAU,CAAC,SAAmB,EAAE,aAAa,CAAC,CAAC;IACtE,CAAC;CACF;AA3XD,wCA2XC","sourcesContent":["import ytdl from \"@distube/ytdl-core\";\nimport ytpl from \"@distube/ytpl\";\nimport { DisTubeBase, DisTubeStream } from \".\";\nimport {\n  DisTubeError,\n  Playlist,\n  Queue,\n  SearchResult,\n  Song,\n  isMessageInstance,\n  isSupportedVoiceChannel,\n  isURL,\n  isVoiceChannelEmpty,\n} from \"..\";\nimport type { DisTube, OtherSongInfo } from \"..\";\nimport type { GuildMember, GuildTextBasedChannel, Message, TextChannel, VoiceBasedChannel } from \"discord.js\";\nimport { isObject } from \"../util\";\n/**\n * DisTube's Handler\n * @extends DisTubeBase\n * @private\n */\nexport class DisTubeHandler extends DisTubeBase {\n  constructor(distube: DisTube) {\n    super(distube);\n\n    if (this.options.youtubeCookie) {\n      const requestOptions: any = {\n        headers: {\n          cookie: this.options.youtubeCookie,\n        },\n      };\n      if (this.options.youtubeIdentityToken) {\n        requestOptions.headers[\"x-youtube-identity-token\"] = this.options.youtubeIdentityToken;\n      }\n      Object.assign(this.ytdlOptions, { requestOptions });\n    }\n\n    const client = this.client;\n    if (this.options.leaveOnEmpty) {\n      client.on(\"voiceStateUpdate\", oldState => {\n        if (!oldState?.channel) return;\n        const queue = this.queues.get(oldState);\n        if (!queue) {\n          if (isVoiceChannelEmpty(oldState)) {\n            setTimeout(() => {\n              if (!this.queues.get(oldState) && isVoiceChannelEmpty(oldState)) this.voices.leave(oldState);\n            }, this.options.emptyCooldown * 1e3).unref();\n          }\n          return;\n        }\n        if (queue.emptyTimeout) {\n          clearTimeout(queue.emptyTimeout);\n          delete queue.emptyTimeout;\n        }\n        if (isVoiceChannelEmpty(oldState)) {\n          queue.emptyTimeout = setTimeout(() => {\n            delete queue.emptyTimeout;\n            if (isVoiceChannelEmpty(oldState)) {\n              queue.voice.leave();\n              this.emit(\"empty\", queue);\n              if (queue.stopped) queue.delete();\n            }\n          }, this.options.emptyCooldown * 1e3).unref();\n        }\n      });\n    }\n  }\n\n  get ytdlOptions() {\n    return this.options.ytdlOptions;\n  }\n\n  /**\n   * Create a new guild queue\n   * @param {Discord.Message|Discord.VoiceChannel|Discord.StageChannel} message A user message | a voice channel\n   * @param {Song|Song[]} song Song to play\n   * @param {Discord.BaseGuildTextChannel?} textChannel A text channel of the queue\n   * @throws {Error}\n   * @returns {Promise<Queue|true>} `true` if queue is not generated\n   * @deprecated Use {@link QueueManager#create} instead\n   */\n  async createQueue(\n    message: Message<true> | VoiceBasedChannel,\n    song: Song | Song[],\n    textChannel?: GuildTextBasedChannel,\n  ): Promise<Queue | true> {\n    process.emitWarning(\n      \"DisTubeHandler#createQueue is deprecated, use QueueManager#create instead.\",\n      \"DeprecationWarning\",\n    );\n    let voice: VoiceBasedChannel | undefined;\n    if (isMessageInstance(message)) {\n      textChannel = message.channel;\n      voice = message.member?.voice?.channel ?? undefined;\n    } else {\n      voice = message;\n    }\n    if (!voice) throw new DisTubeError(\"NOT_IN_VOICE\");\n    if (!isSupportedVoiceChannel(voice)) throw new DisTubeError(\"INVALID_TYPE\", \"BaseGuildVoiceChannel\", voice);\n    return this.queues.create(voice, song, textChannel);\n  }\n\n  /**\n   * @param {string} url url\n   * @param {boolean} [basic=false] getBasicInfo?\n   * @returns {Promise<ytdl.videoInfo>}\n   */\n  getYouTubeInfo(url: string, basic = false): Promise<ytdl.videoInfo> {\n    if (basic) return ytdl.getBasicInfo(url, this.ytdlOptions);\n    return ytdl.getInfo(url, this.ytdlOptions);\n  }\n\n  /**\n   * Resolve a Song\n   * @param {string|Song|SearchResult|Playlist} song URL | Search string | {@link Song}\n   * @param {Object} [options] Optional options\n   * @param {Discord.GuildMember} [options.member] Requested user\n   * @param {*} [options.metadata] Metadata\n   * @returns {Promise<Song|Playlist|null>} Resolved\n   */\n  async resolveSong(\n    song: string | ytdl.videoInfo | Song | Playlist | SearchResult | OtherSongInfo | ytdl.relatedVideo,\n    options: {\n      member?: GuildMember;\n      metadata?: any;\n    } = {},\n  ): Promise<Song | Playlist> {\n    if (song instanceof Song || song instanceof Playlist) {\n      if (\"metadata\" in options) song.metadata = options.metadata;\n      if (\"member\" in options) song.member = options.member;\n      return song;\n    }\n    if (song instanceof SearchResult) {\n      if (song.type === \"video\") return new Song(song, options);\n      return this.resolvePlaylist(song.url, options);\n    }\n    if (isObject(song)) return new Song(song, options);\n    if (ytdl.validateURL(song)) return new Song(await this.getYouTubeInfo(song), options);\n    if (isURL(song)) {\n      for (const plugin of this.distube.extractorPlugins) {\n        if (await plugin.validate(song)) return plugin.resolve(song, options);\n      }\n      throw new DisTubeError(\"NOT_SUPPORTED_URL\");\n    }\n    throw new DisTubeError(\"CANNOT_RESOLVE_SONG\", song);\n  }\n\n  /**\n   * Resolve Song[] or url to a Playlist\n   * @param {Playlist|Song[]|string} playlist Resolvable playlist\n   * @param {Object} options Optional options\n   * @param {Discord.GuildMember} [options.member] Requested user\n   * @param {string} [options.source=\"youtube\"] Playlist source\n   * @param {*} [options.metadata] Metadata\n   * @returns {Promise<Playlist>}\n   */\n  async resolvePlaylist(\n    playlist: Playlist | Song[] | string,\n    options: {\n      member?: GuildMember;\n      source?: string;\n      metadata?: any;\n    } = {},\n  ): Promise<Playlist> {\n    const { member, source, metadata } = { source: \"youtube\", ...options };\n    if (playlist instanceof Playlist) {\n      if (metadata) playlist._patchMetadata(metadata);\n      if (member) playlist._patchMember(member);\n      return playlist;\n    }\n    let solvablePlaylist: Song[] | ytpl.result;\n    if (typeof playlist === \"string\") {\n      solvablePlaylist = await ytpl(playlist, { limit: Infinity });\n      (solvablePlaylist as any).items = solvablePlaylist.items\n        .filter(v => !v.thumbnail.includes(\"no_thumbnail\"))\n        .map(v => new Song(v as OtherSongInfo, { member, metadata }));\n    } else {\n      solvablePlaylist = playlist;\n    }\n    return new Playlist(solvablePlaylist, { member, properties: { source }, metadata });\n  }\n\n  /**\n   * Create a custom playlist\n   * @returns {Promise<Playlist>}\n   * @param {Discord.Message|Discord.GuildMember} message A message from guild channel | A guild member\n   * @param {Array<string|Song|SearchResult>} songs Array of url, Song or SearchResult\n   * @param {Object} [properties={}] Additional properties such as `name`\n   * @param {boolean} [parallel=true] Whether or not fetch the songs in parallel\n   * @param {*} [metadata] Metadata\n   * @deprecated Use {@link DisTube#createCustomPlaylist} instead\n   */\n  async createCustomPlaylist(\n    message: Message<true> | GuildMember,\n    songs: (string | Song | SearchResult)[],\n    properties: any = {},\n    parallel = true,\n    metadata?: any,\n  ): Promise<Playlist> {\n    process.emitWarning(\n      \"DisTubeHandler#createCustomPlaylist is deprecated, use DisTube#createCustomPlaylist instead.\",\n      \"DeprecationWarning\",\n    );\n    return this.distube.createCustomPlaylist(songs, {\n      member: (message as Message<true>).member ?? (message as GuildMember),\n      properties,\n      parallel,\n      metadata,\n    });\n  }\n\n  /**\n   * Play / add a playlist\n   * @returns {Promise<void>}\n   * @param {Discord.BaseGuildVoiceChannel} voice A voice channel\n   * @param {Playlist|string} playlist A YouTube playlist url | a Playlist\n   * @param {Object} [options] Optional options\n   * @param {Discord.BaseGuildTextChannel} [options.textChannel] The default text channel of the queue\n   * @param {boolean} [options.skip=false] Skip the playing song (if exists) and play the added playlist instantly\n   * @param {boolean} [options.unshift=false] Add the playlist after the playing song if exists\n   */\n  async handlePlaylist(\n    voice: VoiceBasedChannel,\n    playlist: Playlist,\n    options?: {\n      textChannel?: GuildTextBasedChannel;\n      skip?: boolean;\n      position?: number;\n    },\n  ): Promise<void>;\n  /** @deprecated `options.unshift` is deprecated, use `options.position` instead */\n  async handlePlaylist(\n    voice: VoiceBasedChannel,\n    playlist: Playlist,\n    options?: {\n      textChannel?: GuildTextBasedChannel;\n      skip?: boolean;\n      position?: number;\n      unshift?: boolean;\n    },\n  ): Promise<void>;\n  async handlePlaylist(\n    voice: VoiceBasedChannel,\n    playlist: Playlist,\n    options: {\n      textChannel?: GuildTextBasedChannel;\n      skip?: boolean;\n      position?: number;\n      unshift?: boolean;\n    } = {},\n  ): Promise<void> {\n    const { textChannel, skip, unshift } = { skip: false, unshift: false, ...options };\n\n    let position = Number(options.position);\n    if (!position) {\n      if (skip && position !== 0) position = 1;\n      else position = 0;\n    }\n    if (unshift) position = 1;\n\n    if (!(playlist instanceof Playlist)) throw new DisTubeError(\"INVALID_TYPE\", \"Playlist\", playlist, \"playlist\");\n    if (!this.options.nsfw && !(textChannel as TextChannel)?.nsfw) {\n      playlist.songs = playlist.songs.filter(s => !s.age_restricted);\n    }\n    if (!playlist.songs.length) {\n      if (!this.options.nsfw && !(textChannel as TextChannel)?.nsfw) throw new DisTubeError(\"EMPTY_FILTERED_PLAYLIST\");\n      throw new DisTubeError(\"EMPTY_PLAYLIST\");\n    }\n    const songs = playlist.songs;\n    const queue = this.queues.get(voice);\n    if (queue) {\n      queue.addToQueue(songs, position);\n      if (skip) queue.skip();\n      else this.emit(\"addList\", queue, playlist);\n    } else {\n      const newQueue = await this.queues.create(voice, songs, textChannel);\n      if (newQueue instanceof Queue) {\n        if (this.options.emitAddListWhenCreatingQueue) this.emit(\"addList\", newQueue, playlist);\n        this.emit(\"playSong\", newQueue, newQueue.songs[0]);\n      }\n    }\n  }\n\n  /**\n   * Search for a song, fire {@link DisTube#event:error} if not found.\n   * @param {Discord.Message} message The original message from an user\n   * @param {string} query The query string\n   * @returns {Promise<SearchResult?>} Song info\n   */\n  async searchSong(message: Message<true>, query: string): Promise<SearchResult | null> {\n    if (!isMessageInstance(message)) throw new DisTubeError(\"INVALID_TYPE\", \"Discord.Message\", message, \"message\");\n    if (typeof query !== \"string\") throw new DisTubeError(\"INVALID_TYPE\", \"string\", query, \"query\");\n    if (query.length === 0) throw new DisTubeError(\"EMPTY_STRING\", \"query\");\n    const limit = this.options.searchSongs > 1 ? this.options.searchSongs : 1;\n    const results = await this.distube\n      .search(query, {\n        limit,\n        safeSearch: this.options.nsfw ? false : !(message.channel as TextChannel)?.nsfw,\n      })\n      .catch(() => {\n        if (!this.emit(\"searchNoResult\", message, query)) {\n          // eslint-disable-next-line no-console\n          console.warn(\"searchNoResult event does not have any listeners! Emits `error` event instead.\");\n          throw new DisTubeError(\"NO_RESULT\");\n        }\n      });\n    if (!results) return null;\n    return this.createSearchMessageCollector(message, results, query);\n  }\n\n  /**\n   * Create a message collector for selecting search results.\n   *\n   * Needed events: {@link DisTube#event:searchResult}, {@link DisTube#event:searchCancel},\n   * {@link DisTube#event:searchInvalidAnswer}, {@link DisTube#event:searchDone}.\n   * @param {Discord.Message} message The original message from an user\n   * @param {Array<SearchResult|Song|Playlist>} results The search results\n   * @param {string?} [query] The query string\n   * @returns {Promise<SearchResult|Song|Playlist|null>} Selected result\n   */\n  async createSearchMessageCollector<R extends SearchResult | Song | Playlist>(\n    message: Message<true>,\n    results: Array<R>,\n    query?: string,\n  ): Promise<R | null> {\n    if (!isMessageInstance(message)) throw new DisTubeError(\"INVALID_TYPE\", \"Discord.Message\", message, \"message\");\n    if (!Array.isArray(results) || results.length == 0) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"Array<SearchResult|Song|Playlist>\", results, \"results\");\n    }\n    if (this.options.searchSongs > 1) {\n      const searchEvents = [\n        \"searchNoResult\",\n        \"searchResult\",\n        \"searchCancel\",\n        \"searchInvalidAnswer\",\n        \"searchDone\",\n      ] as const;\n      for (const evn of searchEvents) {\n        if (this.distube.listenerCount(evn) === 0) {\n          /* eslint-disable no-console */\n          console.warn(`\"searchSongs\" option is disabled due to missing \"${evn}\" listener.`);\n          console.warn(\n            `If you don't want to use \"${evn}\" event, simply add an empty listener (not recommended):\\n` +\n              `<DisTube>.on(\"${evn}\", () => {})`,\n          );\n          /* eslint-enable no-console */\n          this.options.searchSongs = 0;\n        }\n      }\n    }\n    const limit = this.options.searchSongs > 1 ? this.options.searchSongs : 1;\n    let result = results[0];\n    if (limit > 1) {\n      results.splice(limit);\n      this.emit(\"searchResult\", message, results, query);\n      const c = message.channel;\n      const answers = await (c.awaitMessages.length === 0\n        ? c.awaitMessages({\n            filter: (m: Message) => m.author.id === message.author.id,\n            max: 1,\n            time: this.options.searchCooldown * 1e3,\n            errors: [\"time\"],\n          })\n        : (c.awaitMessages as any)((m: Message) => m.author.id === message.author.id, {\n            max: 1,\n            time: this.options.searchCooldown * 1e3,\n            errors: [\"time\"],\n          })\n      ).catch(() => undefined);\n      const ans = answers?.first();\n      if (!ans) {\n        this.emit(\"searchCancel\", message, query);\n        return null;\n      }\n      const index = parseInt(ans.content, 10);\n      if (isNaN(index) || index > results.length || index < 1) {\n        this.emit(\"searchInvalidAnswer\", message, ans, query);\n        return null;\n      }\n      this.emit(\"searchDone\", message, ans, query);\n      result = results[index - 1];\n    }\n    return result;\n  }\n\n  /**\n   * Create a ytdl stream\n   * @param {Queue} queue Queue\n   * @returns {DisTubeStream}\n   */\n  createStream(queue: Queue): DisTubeStream {\n    const { duration, formats, isLive, source, streamURL } = queue.songs[0];\n    const filterArgs: string[] = [];\n    queue.filters.forEach((filter: string | number) => filterArgs.push(this.distube.filters[filter]));\n    const ffmpegArgs = queue.filters?.length ? [\"-af\", filterArgs.join(\",\")] : undefined;\n    const seek = duration ? queue.beginTime : undefined;\n    const streamOptions = { ffmpegArgs, seek, isLive };\n    if (source === \"youtube\") return DisTubeStream.YouTube(formats, streamOptions);\n    return DisTubeStream.DirectLink(streamURL as string, streamOptions);\n  }\n}\n"]}