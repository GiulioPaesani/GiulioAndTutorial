import { BaseManager } from ".";
import { Queue } from "../..";
import type { Song } from "../..";
import type { GuildTextBasedChannel, VoiceBasedChannel } from "discord.js";
/**
 * Queue manager
 * @extends BaseManager
 */
export declare class QueueManager extends BaseManager<Queue> {
    #private;
    /**
     * Collection of {@link Queue}.
     * @name QueueManager#collection
     * @type {Discord.Collection<string, Queue>}
     */
    /**
     * Create a {@link Queue}
     * @private
     * @param {Discord.BaseGuildVoiceChannel} channel A voice channel
     * @param {Song|Song[]} song First song
     * @param {Discord.BaseGuildTextChannel} textChannel Default text channel
     * @returns {Promise<Queue|true>} Returns `true` if encounter an error
     */
    create(channel: VoiceBasedChannel, song: Song[] | Song, textChannel?: GuildTextBasedChannel): Promise<Queue | true>;
    /**
     * Play a song on voice connection
     * @private
     * @param {Queue} queue The guild queue
     * @returns {Promise<boolean>} error?
     */
    playSong(queue: Queue): Promise<boolean>;
}
//# sourceMappingURL=QueueManager.d.ts.map