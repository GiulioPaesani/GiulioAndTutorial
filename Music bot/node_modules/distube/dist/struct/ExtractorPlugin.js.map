{"version":3,"file":"ExtractorPlugin.js","sourceRoot":"","sources":["../../src/struct/ExtractorPlugin.ts"],"names":[],"mappings":";;;AAAA,sDAAsD;AACtD,wBAA2B;AAC3B,0BAAgC;AAIhC;;;;GAIG;AACH,MAAsB,eAAgB,SAAQ,SAAM;IAApD;;QACE,SAAI,GAAG,cAAU,CAAC,SAAS,CAAC;IAuB9B,CAAC;IARC;;;;OAIG;IACH,QAAQ,CAAC,GAAW;QAClB,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAxBD,0CAwBC;AAED;;;;;;;;;;;GAWG","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Plugin } from \".\";\nimport { PluginType } from \"..\";\nimport type { GuildMember } from \"discord.js\";\nimport type { Awaitable, Playlist, Song } from \"..\";\n\n/**\n * Extractor Plugin\n * @extends Plugin\n * @abstract\n */\nexport abstract class ExtractorPlugin extends Plugin {\n  type = PluginType.EXTRACTOR;\n  /**\n   * Resolve the validated url to a {@link Song} or a {@link Playlist}.\n   *\n   * @param {string} url URL\n   * @param {Object} [options] Optional options\n   * @param {Discord.GuildMember} [options.member] Requested user\n   * @param {*} [options.metadata] Metadata\n   * @returns {Song|Playlist|Promise<Song|Playlist>}\n   * @abstract\n   */\n  abstract resolve<T = unknown>(\n    url: string,\n    options: { member?: GuildMember; metadata?: T },\n  ): Awaitable<Song<T> | Playlist<T>>;\n  /**\n   * Check if the url is working with this plugin\n   * @param {string} url Input url\n   * @returns {boolean|Promise<boolean>}\n   */\n  validate(url: string): Awaitable<boolean> {\n    return false;\n  }\n}\n\n/**\n * Resolve the validated url to a {@link Song} or a {@link Playlist}.\n *\n * @param {string} url URL\n * @param {Object} [options] Optional options\n * @param {Discord.GuildMember} [options.member] Requested user\n * @param {*} [options.metadata] Metadata\n * @returns {Song|Playlist|Promise<Song|Playlist>}\n * @method resolve\n * @memberof ExtractorPlugin#\n * @abstract\n */\n"]}