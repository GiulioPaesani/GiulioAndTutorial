import type ytpl from "@distube/ytpl";
import type { PlaylistInfo, Song } from "..";
import type { GuildMember } from "discord.js";
/**
 * Class representing a playlist.
 * @prop {string} source Playlist source
 * @template T - The type for the metadata (if any) of the playlist
 */
export declare class Playlist<T = unknown> implements PlaylistInfo {
    #private;
    source: string;
    songs: Song[];
    name: string;
    url?: string;
    thumbnail?: string;
    [x: string]: any;
    constructor(playlist: Song[] | ytpl.result | PlaylistInfo);
    /** @deprecated Passing GuildMember for DisTube#Playlist() is deprecated. */
    constructor(playlist: Song[] | ytpl.result | PlaylistInfo, member?: GuildMember, properties?: Record<string, any>, metadata?: T);
    /**
     * Create a playlist
     * @param {Song[]|PlaylistInfo} playlist Playlist
     * @param {Object} [options] Optional options
     * @param {Discord.GuildMember} [options.member] Requested user
     * @param {Object} [options.properties] Custom properties
     * @param {T} [options.metadata] Playlist metadata
     */
    constructor(playlist: Song[] | ytpl.result | PlaylistInfo, options?: {
        member?: GuildMember;
        properties?: Record<string, any>;
        metadata?: T;
    });
    /**
     * Playlist duration in second.
     * @type {number}
     */
    get duration(): number;
    /**
     * Formatted duration string `hh:mm:ss`.
     * @type {string}
     */
    get formattedDuration(): string;
    /**
     * User requested.
     * @type {Discord.GuildMember?}
     */
    get member(): GuildMember | undefined;
    set member(member: GuildMember | undefined);
    /**
     * User requested.
     * @type {Discord.User?}
     */
    get user(): import("discord.js").User | undefined;
    /**
     * Optional metadata that can be used to identify the playlist.
     * @type {T}
     */
    get metadata(): T;
    set metadata(metadata: T);
}
//# sourceMappingURL=Playlist.d.ts.map