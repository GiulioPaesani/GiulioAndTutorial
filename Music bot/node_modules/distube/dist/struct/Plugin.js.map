{"version":3,"file":"Plugin.js","sourceRoot":"","sources":["../../src/struct/Plugin.ts"],"names":[],"mappings":";;;AAcA;;;;GAIG;AACH,MAAsB,MAAM;IAG1B,IAAI,CAAC,OAAgB;QACnB;;;WAGG;QACH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IACD;;;;OAIG;IACH;;;;;OAKG;IACH,IAAI,CAAC,SAA8B,EAAE,GAAG,IAAS;QAC/C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,CAAC;IAC/C,CAAC;IACD;;;;OAIG;IACH,SAAS,CAAC,KAAY,EAAE,OAA+B;QACrD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IACD;;;;OAIG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IACD;;;;OAIG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IACD;;;;OAIG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;IACD;;;;OAIG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IAC9B,CAAC;IACD;;;;OAIG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IAC9B,CAAC;IACD;;;;;OAKG;IACH,YAAY,CAAC,GAAW;QACtB,OAAO,GAAG,CAAC;IACb,CAAC;IACD;;;;;OAKG;IACH,eAAe,CAAC,GAAW;QACzB,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AA1FD,wBA0FC","sourcesContent":["/* eslint-disable  @typescript-eslint/no-unused-vars */\nimport type { Client, GuildTextBasedChannel } from \"discord.js\";\nimport type {\n  Awaitable,\n  DisTube,\n  DisTubeEvents,\n  DisTubeHandler,\n  DisTubeVoiceManager,\n  Options,\n  PluginType,\n  QueueManager,\n  RelatedSong,\n} from \"..\";\n\n/**\n * DisTube Plugin\n * @abstract\n * @private\n */\nexport abstract class Plugin {\n  type!: PluginType;\n  distube!: DisTube;\n  init(distube: DisTube) {\n    /**\n     * DisTube\n     * @type {DisTube}\n     */\n    this.distube = distube;\n  }\n  /**\n   * Type of the plugin\n   * @name Plugin#type\n   * @type {PluginType}\n   */\n  /**\n   * Emit the {@link DisTube} of this base\n   * @param {string} eventName Event name\n   * @param {...any} args arguments\n   * @returns {boolean}\n   */\n  emit(eventName: keyof DisTubeEvents, ...args: any): boolean {\n    return this.distube.emit(eventName, ...args);\n  }\n  /**\n   * Emit error event\n   * @param {Error} error error\n   * @param {Discord.BaseGuildTextChannel} [channel] Text channel where the error is encountered.\n   */\n  emitError(error: Error, channel?: GuildTextBasedChannel) {\n    this.distube.emitError(error, channel);\n  }\n  /**\n   * The queue manager\n   * @type {QueueManager}\n   * @readonly\n   */\n  get queues(): QueueManager {\n    return this.distube.queues;\n  }\n  /**\n   * The voice manager\n   * @type {DisTubeVoiceManager}\n   * @readonly\n   */\n  get voices(): DisTubeVoiceManager {\n    return this.distube.voices;\n  }\n  /**\n   * Discord.js client\n   * @type {Discord.Client}\n   * @readonly\n   */\n  get client(): Client {\n    return this.distube.client;\n  }\n  /**\n   * DisTube options\n   * @type {DisTubeOptions}\n   * @readonly\n   */\n  get options(): Options {\n    return this.distube.options;\n  }\n  /**\n   * DisTube handler\n   * @type {DisTubeHandler}\n   * @readonly\n   */\n  get handler(): DisTubeHandler {\n    return this.distube.handler;\n  }\n  /**\n   * Get the stream url from {@link Song#url}. Returns {@link Song#url} by default.\n   * Not needed if the plugin plays song from YouTube.\n   * @param {string} url Input url\n   * @returns {string|Promise<string>}\n   */\n  getStreamURL(url: string): Awaitable<string> {\n    return url;\n  }\n  /**\n   * Get related songs from a supported url. {@link Song#member} should be `undefined`.\n   * Not needed to add {@link Song#related} because it will be added with this function later.\n   * @param {string} url Input url\n   * @returns {Song[]|Promise<Song[]>}\n   */\n  getRelatedSongs(url: string): Awaitable<RelatedSong[]> {\n    return [];\n  }\n}\n"]}