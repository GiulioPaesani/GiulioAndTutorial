"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TaskQueue_tasks;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskQueue = void 0;
class Task {
    constructor(resolveInfo) {
        this.resolveInfo = resolveInfo;
        this.promise = new Promise(res => {
            this.resolve = res;
        });
    }
}
/**
 * Task queuing system
 * @private
 */
class TaskQueue {
    constructor() {
        /**
         * The task array
         * @type {Task[]}
         * @private
         */
        _TaskQueue_tasks.set(this, []);
    }
    /**
     * Waits for last task finished and queues a new task
     * @param {boolean} [resolveInfo=false] Whether the task is a resolving info task
     * @returns {Promise<void>}
     */
    queuing(resolveInfo = false) {
        const next = this.remaining ? __classPrivateFieldGet(this, _TaskQueue_tasks, "f")[__classPrivateFieldGet(this, _TaskQueue_tasks, "f").length - 1].promise : Promise.resolve();
        __classPrivateFieldGet(this, _TaskQueue_tasks, "f").push(new Task(resolveInfo));
        return next;
    }
    /**
     * Removes the finished task and processes the next task
     */
    resolve() {
        __classPrivateFieldGet(this, _TaskQueue_tasks, "f").shift()?.resolve();
    }
    /**
     * The remaining number of tasks
     * @type {number}
     */
    get remaining() {
        return __classPrivateFieldGet(this, _TaskQueue_tasks, "f").length;
    }
    /**
     * Whether or not having a resolving info task
     * @type {boolean}
     */
    get hasResolveTask() {
        return !!__classPrivateFieldGet(this, _TaskQueue_tasks, "f").find(t => t.resolveInfo);
    }
}
exports.TaskQueue = TaskQueue;
_TaskQueue_tasks = new WeakMap();
//# sourceMappingURL=TaskQueue.js.map