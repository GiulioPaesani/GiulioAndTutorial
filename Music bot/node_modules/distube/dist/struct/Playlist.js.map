{"version":3,"file":"Playlist.js","sourceRoot":"","sources":["../../src/struct/Playlist.ts"],"names":[],"mappings":"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","sourcesContent":["import { DisTubeError, formatDuration, isMemberInstance, isRecord } from \"..\";\nimport type ytpl from \"@distube/ytpl\";\nimport type { PlaylistInfo, Song } from \"..\";\nimport type { GuildMember } from \"discord.js\";\n\n// TODO: Remove ! on the next major version\n\n/**\n * Class representing a playlist.\n * @prop {string} source Playlist source\n * @template T - The type for the metadata (if any) of the playlist\n */\nexport class Playlist<T = unknown> implements PlaylistInfo {\n  source!: string;\n  songs!: Song[];\n  name!: string;\n  #metadata!: T;\n  #member?: GuildMember;\n  url?: string;\n  thumbnail?: string;\n  [x: string]: any;\n  constructor(playlist: Song[] | ytpl.result | PlaylistInfo);\n  /** @deprecated Passing GuildMember for DisTube#Playlist() is deprecated. */\n  constructor(\n    playlist: Song[] | ytpl.result | PlaylistInfo,\n    member?: GuildMember,\n    properties?: Record<string, any>,\n    metadata?: T,\n  );\n  /**\n   * Create a playlist\n   * @param {Song[]|PlaylistInfo} playlist Playlist\n   * @param {Object} [options] Optional options\n   * @param {Discord.GuildMember} [options.member] Requested user\n   * @param {Object} [options.properties] Custom properties\n   * @param {T} [options.metadata] Playlist metadata\n   */\n  constructor(\n    playlist: Song[] | ytpl.result | PlaylistInfo,\n    options?: {\n      member?: GuildMember;\n      properties?: Record<string, any>;\n      metadata?: T;\n    },\n  );\n  constructor(\n    playlist: Song[] | ytpl.result | PlaylistInfo,\n    options:\n      | GuildMember\n      | {\n          member?: GuildMember;\n          properties?: Record<string, any>;\n          metadata?: T;\n        } = {},\n    props?: Record<string, any>,\n    meta?: T,\n  ) {\n    if (isMemberInstance(options)) {\n      process.emitWarning(\n        \"Passing GuildMember for DisTube#Playlist() is deprecated, read the docs for more.\",\n        \"DeprecationWarning\",\n      );\n      return new Playlist(playlist, { member: options, properties: props, metadata: meta });\n    }\n\n    const { member, properties, metadata } = options;\n\n    if (typeof playlist !== \"object\") {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"Array<Song>\", \"object\"], playlist, \"playlist\");\n    }\n    if (typeof properties !== \"undefined\" && !isRecord(properties)) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"object\", properties, \"properties\");\n    }\n    // FIXME\n    const info = playlist as any;\n    /**\n     * The source of the playlist\n     * @type {string}\n     */\n    this.source = (info.source || properties?.source || \"youtube\").toLowerCase();\n    /**\n     * Playlist songs.\n     * @type {Array<Song>}\n     */\n    this.songs = Array.isArray(info) ? info : info.items || info.songs;\n    if (!Array.isArray(this.songs) || !this.songs.length) {\n      throw new DisTubeError(\"EMPTY_PLAYLIST\");\n    }\n    this.songs.map(s => s.constructor.name === \"Song\" && (s.playlist = this));\n    this.member = member || info.member || undefined;\n    /**\n     * Playlist name.\n     * @type {string}\n     */\n    this.name =\n      info.name ||\n      info.title ||\n      (this.songs[0].name\n        ? `${this.songs[0].name} and ${this.songs.length - 1} more songs.`\n        : `${this.songs.length} songs playlist`);\n    /**\n     * Playlist URL.\n     * @type {string}\n     */\n    this.url = info.url || info.webpage_url;\n    /**\n     * Playlist thumbnail.\n     * @type {string?}\n     */\n    this.thumbnail = info.thumbnail?.url || info.thumbnail || this.songs[0].thumbnail;\n    if (properties) for (const [key, value] of Object.entries(properties)) this[key] = value;\n\n    this.metadata = metadata as T;\n  }\n\n  /**\n   * Playlist duration in second.\n   * @type {number}\n   */\n  get duration() {\n    return this.songs?.reduce((prev, next) => prev + (next.duration || 0), 0) || 0;\n  }\n\n  /**\n   * Formatted duration string `hh:mm:ss`.\n   * @type {string}\n   */\n  get formattedDuration() {\n    return formatDuration(this.duration);\n  }\n\n  /**\n   * User requested.\n   * @type {Discord.GuildMember?}\n   */\n  get member() {\n    return this.#member;\n  }\n\n  set member(member: GuildMember | undefined) {\n    if (!member) return;\n    this.#member = member;\n    this.songs.map(s => s.constructor.name === \"Song\" && (s.member = this.member));\n  }\n\n  /**\n   * User requested.\n   * @type {Discord.User?}\n   */\n  get user() {\n    return this.member?.user;\n  }\n\n  /**\n   * Optional metadata that can be used to identify the playlist.\n   * @type {T}\n   */\n  get metadata() {\n    return this.#metadata;\n  }\n\n  set metadata(metadata: T) {\n    this.#metadata = metadata;\n    this.songs.map(s => s.constructor.name === \"Song\" && (s.metadata = metadata));\n  }\n}\n"]}