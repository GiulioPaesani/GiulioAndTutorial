{"version":3,"file":"Queue.js","sourceRoot":"","sources":["../../src/struct/Queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { DisTubeBase } from \"../core\";\nimport { DisTubeError, RepeatMode, Song, TaskQueue, formatDuration } from \"..\";\nimport type { DisTube, DisTubeVoice, DisTubeVoiceEvents } from \"..\";\nimport type { GuildMember, GuildTextBasedChannel, Snowflake } from \"discord.js\";\n\n/**\n * Represents a queue.\n * @extends DisTubeBase\n */\nexport class Queue extends DisTubeBase {\n  readonly id: Snowflake;\n  /**\n   * Voice connection of this queue\n   */\n  voice: DisTubeVoice;\n  /**\n   * List of songs in the queue (The first one is the playing song)\n   */\n  songs: Song[];\n  /**\n   * List of the previous songs.\n   */\n  previousSongs: Song[];\n  /**\n   * Whether stream is currently stopped.\n   * @private\n   */\n  stopped: boolean;\n  /**\n   * Whether or not the last song was skipped to next song.\n   * @private\n   */\n  next: boolean;\n  /**\n   * Whether or not the last song was skipped to previous song.\n   * @private\n   */\n  prev: boolean;\n  /**\n   * Whether or not the stream is currently playing.\n   */\n  playing: boolean;\n  /**\n   * Whether or not the stream is currently paused.\n   */\n  paused: boolean;\n  /**\n   * Type of repeat mode (`0` is disabled, `1` is repeating a song, `2` is repeating all the queue).\n   * Default value: `0` (disabled)\n   */\n  repeatMode: RepeatMode;\n  /**\n   * Whether or not the autoplay mode is enabled.\n   * Default value: `false`\n   */\n  autoplay: boolean;\n  /**\n   * Enabled audio filters.\n   * Available filters: {@link Filters}\n   */\n  filters: string[];\n  /**\n   * What time in the song to begin (in seconds).\n   */\n  beginTime: number;\n  /**\n   * The text channel of the Queue. (Default: where the first command is called).\n   */\n  textChannel?: GuildTextBasedChannel;\n  /**\n   * Timeout for checking empty channel\n   * @private\n   */\n  emptyTimeout?: NodeJS.Timeout;\n  /**\n   * The client user as a `GuildMember` of this queue's guild\n   */\n  clientMember: GuildMember;\n  /**\n   * Task queuing system\n   */\n  taskQueue: TaskQueue;\n  listeners?: DisTubeVoiceEvents;\n  /**\n   * Create a queue for the guild\n   * @param {DisTube} distube DisTube\n   * @param {DisTubeVoice} voice Voice connection\n   * @param {Song|Song[]} song First song(s)\n   * @param {Discord.BaseGuildTextChannel?} textChannel Default text channel\n   */\n  constructor(distube: DisTube, voice: DisTubeVoice, song: Song | Song[], textChannel?: GuildTextBasedChannel) {\n    super(distube);\n    /**\n     * The client user as a `GuildMember` of this queue's guild\n     * @type {Discord.GuildMember}\n     */\n    this.clientMember =\n      voice.channel.guild?.me ??\n      (() => {\n        throw new DisTubeError(\"INVALID_TYPE\", \"GuildMember\", null, \"<VoiceChannel>.guild.me\");\n      })();\n    /**\n     * Voice connection of this queue.\n     * @type {DisTubeVoice}\n     */\n    this.voice = voice;\n    /**\n     * Queue id (Guild id)\n     * @type {Discord.Snowflake}\n     */\n    this.id = voice.id;\n    /**\n     * Get or set the stream volume. Default value: `50`.\n     * @type {number}\n     */\n    this.volume = 50;\n    /**\n     * List of songs in the queue (The first one is the playing song)\n     * @type {Array<Song>}\n     */\n    this.songs = Array.isArray(song) ? [...song] : [song];\n    /**\n     * List of the previous songs.\n     * @type {Array<Song>}\n     */\n    this.previousSongs = [];\n    /**\n     * Whether stream is currently stopped.\n     * @type {boolean}\n     * @private\n     */\n    this.stopped = false;\n    /**\n     * Whether or not the last song was skipped to next song.\n     * @type {boolean}\n     * @private\n     */\n    this.next = false;\n    /**\n     * Whether or not the last song was skipped to previous song.\n     * @type {boolean}\n     * @private\n     */\n    this.prev = false;\n    /**\n     * Whether or not the stream is currently playing.\n     * @type {boolean}\n     */\n    this.playing = true;\n    /**\n     * Whether or not the stream is currently paused.\n     * @type {boolean}\n     */\n    this.paused = false;\n    /**\n     * Type of repeat mode (`0` is disabled, `1` is repeating a song, `2` is repeating all the queue).\n     * Default value: `0` (disabled)\n     * @type {RepeatMode}\n     */\n    this.repeatMode = RepeatMode.DISABLED;\n    /**\n     * Whether or not the autoplay mode is enabled.\n     * Default value: `false`\n     * @type {boolean}\n     */\n    this.autoplay = false;\n    /**\n     * Enabled audio filters.\n     * Available filters: {@link Filters}\n     * @type {Array<string>}\n     */\n    this.filters = [];\n    /**\n     * What time in the song to begin (in seconds).\n     * @type {number}\n     */\n    this.beginTime = 0;\n    /**\n     * The text channel of the Queue. (Default: where the first command is called).\n     * @type {Discord.TextChannel?}\n     */\n    this.textChannel = textChannel;\n    /**\n     * Timeout for checking empty channel\n     * @type {*}\n     * @private\n     */\n    this.emptyTimeout = undefined;\n    /**\n     * Task queuing system\n     * @type {TaskQueue}\n     * @private\n     */\n    this.taskQueue = new TaskQueue();\n    /**\n     * DisTubeVoice listener\n     * @type {Object}\n     * @private\n     */\n    this.listeners = undefined;\n  }\n  /**\n   * Formatted duration string.\n   * @type {string}\n   */\n  get formattedDuration() {\n    return formatDuration(this.duration);\n  }\n  /**\n   * Queue's duration.\n   * @type {number}\n   */\n  get duration() {\n    return this.songs.length ? this.songs.reduce((prev, next) => prev + next.duration, 0) : 0;\n  }\n  /**\n   * What time in the song is playing (in seconds).\n   * @type {number}\n   */\n  get currentTime() {\n    return this.voice.playbackDuration + this.beginTime;\n  }\n  /**\n   * Formatted {@link Queue#currentTime} string.\n   * @type {string}\n   */\n  get formattedCurrentTime() {\n    return formatDuration(this.currentTime);\n  }\n  /**\n   * The voice channel playing in.\n   * @type {Discord.VoiceChannel|Discord.StageChannel|null}\n   */\n  get voiceChannel() {\n    return this.clientMember.voice.channel;\n  }\n  get volume() {\n    return this.voice.volume;\n  }\n  set volume(value: number) {\n    this.voice.volume = value;\n  }\n  /**\n   * @private\n   * Add a Song or an array of Song to the queue\n   * @param {Song|Song[]} song Song to add\n   * @param {number} [position=0] Position to add, <= 0 to add to the end of the queue\n   * @throws {Error}\n   * @returns {Queue} The guild queue\n   */\n  addToQueue(song: Song | Song[], position = 0): Queue {\n    if (!song || (Array.isArray(song) && !song.length)) {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"Song\", \"Array<Song>\"], song, \"song\");\n    }\n    if (typeof position !== \"number\" || !Number.isInteger(position)) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"integer\", position, \"position\");\n    }\n    if (position <= 0) {\n      if (Array.isArray(song)) this.songs.push(...song);\n      else this.songs.push(song);\n    } else if (Array.isArray(song)) {\n      this.songs.splice(position, 0, ...song);\n    } else {\n      this.songs.splice(position, 0, song);\n    }\n    if (Array.isArray(song)) song.map(s => delete s.formats);\n    else delete song.formats;\n    return this;\n  }\n  /**\n   * Pause the guild stream\n   * @returns {Queue} The guild queue\n   */\n  pause(): Queue {\n    if (this.paused) throw new DisTubeError(\"PAUSED\");\n    this.playing = false;\n    this.paused = true;\n    this.voice.pause();\n    return this;\n  }\n  /**\n   * Resume the guild stream\n   * @returns {Queue} The guild queue\n   */\n  resume(): Queue {\n    if (this.playing) throw new DisTubeError(\"RESUMED\");\n    this.playing = true;\n    this.paused = false;\n    this.voice.unpause();\n    return this;\n  }\n  /**\n   * Set the guild stream's volume\n   * @param {number} percent The percentage of volume you want to set\n   * @returns {Queue} The guild queue\n   */\n  setVolume(percent: number): Queue {\n    this.volume = percent;\n    return this;\n  }\n\n  /**\n   * Skip the playing song if there is a next song in the queue.\n   * <info>If {@link Queue#autoplay} is `true` and there is no up next song,\n   * DisTube will add and play a related song.</info>\n   * @returns {Promise<Song>} The song will skip to\n   * @throws {Error}\n   */\n  async skip(): Promise<Song> {\n    await this.taskQueue.queuing();\n    try {\n      if (this.songs.length <= 1) {\n        if (this.autoplay) await this.addRelatedSong();\n        else throw new DisTubeError(\"NO_UP_NEXT\");\n      }\n      const song = this.songs[1];\n      this.next = true;\n      this.voice.stop();\n      return song;\n    } finally {\n      this.taskQueue.resolve();\n    }\n  }\n\n  /**\n   * Play the previous song if exists\n   * @returns {Song} The guild queue\n   * @throws {Error}\n   */\n  async previous(): Promise<Song> {\n    await this.taskQueue.queuing();\n    try {\n      if (!this.options.savePreviousSongs) throw new DisTubeError(\"DISABLED_OPTION\", \"savePreviousSongs\");\n      if (this.previousSongs?.length === 0 && this.repeatMode !== RepeatMode.QUEUE) {\n        throw new DisTubeError(\"NO_PREVIOUS\");\n      }\n      const song =\n        this.repeatMode === 2 ? this.songs[this.songs.length - 1] : this.previousSongs[this.previousSongs.length - 1];\n      this.prev = true;\n      this.voice.stop();\n      return song;\n    } finally {\n      this.taskQueue.resolve();\n    }\n  }\n  /**\n   * Shuffle the queue's songs\n   * @returns {Promise<Queue>} The guild queue\n   */\n  async shuffle(): Promise<Queue> {\n    await this.taskQueue.queuing();\n    try {\n      const playing = this.songs.shift();\n      if (playing === undefined) return this;\n      for (let i = this.songs.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [this.songs[i], this.songs[j]] = [this.songs[j], this.songs[i]];\n      }\n      this.songs.unshift(playing);\n      return this;\n    } finally {\n      this.taskQueue.resolve();\n    }\n  }\n  /**\n   * Jump to the song position in the queue.\n   * The next one is 1, 2,...\n   * The previous one is -1, -2,...\n   * @param {number} position The song position to play\n   * @returns {Promise<Queue>} The guild queue\n   * @throws {Error} if `num` is invalid number\n   */\n  async jump(position: number): Promise<Queue> {\n    await this.taskQueue.queuing();\n    try {\n      if (typeof position !== \"number\") throw new DisTubeError(\"INVALID_TYPE\", \"number\", position, \"position\");\n      if (!position || position > this.songs.length || -position > this.previousSongs.length) {\n        throw new DisTubeError(\"NO_SONG_POSITION\");\n      }\n      if (position > 0) {\n        const nextSongs = this.songs.splice(position - 1);\n        if (this.options.savePreviousSongs) {\n          this.previousSongs.push(...this.songs);\n        } else {\n          this.previousSongs.push(...this.songs.map(s => ({ id: s.id } as Song)));\n        }\n        this.songs = nextSongs;\n        this.next = true;\n      } else if (!this.options.savePreviousSongs) {\n        throw new DisTubeError(\"DISABLED_OPTION\", \"savePreviousSongs\");\n      } else {\n        this.prev = true;\n        if (position !== -1) this.songs.unshift(...this.previousSongs.splice(position + 1));\n      }\n      this.voice.stop();\n      return this;\n    } finally {\n      this.taskQueue.resolve();\n    }\n  }\n  /**\n   * Set the repeat mode of the guild queue.\\\n   * Toggle mode `(Disabled -> Song -> Queue -> Disabled ->...)` if `mode` is `undefined`\n   * @param {RepeatMode?} [mode] The repeat modes (toggle if `undefined`)\n   * @returns {RepeatMode} The new repeat mode\n   */\n  setRepeatMode(mode?: RepeatMode): RepeatMode {\n    if (mode !== undefined && !Object.values(RepeatMode).includes(mode)) {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"RepeatMode\", \"undefined\"], mode, \"mode\");\n    }\n    if (mode === undefined) this.repeatMode = (this.repeatMode + 1) % 3;\n    else if (this.repeatMode === mode) this.repeatMode = RepeatMode.DISABLED;\n    else this.repeatMode = mode;\n    return this.repeatMode;\n  }\n  /**\n   * Enable or disable filter(s) of the queue.\n   * Available filters: {@link Filters}\n   * @param {string|string[]|false} filter A filter name, an array of filter name or `false` to clear all the filters\n   * @param {boolean} [force=false] Force enable the input filter(s) even if it's enabled\n   * @returns {Array<string>} Enabled filters.\n   * @throws {Error}\n   */\n  setFilter(filter: string | string[] | false, force = false): Array<string> {\n    if (Array.isArray(filter)) {\n      filter = filter.filter(f => Object.prototype.hasOwnProperty.call(this.distube.filters, f));\n      if (!filter.length) throw new DisTubeError(\"EMPTY_FILTERED_ARRAY\", \"filter\", \"filter name\");\n      for (const f of filter) {\n        if (this.filters.includes(f)) {\n          if (!force) this.filters.splice(this.filters.indexOf(f), 1);\n        } else {\n          this.filters.push(f);\n        }\n      }\n    } else if (filter === false) {\n      this.filters = [];\n    } else if (!Object.prototype.hasOwnProperty.call(this.distube.filters, filter)) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"filter name\", filter, \"filter\");\n    } else if (this.filters.includes(filter)) {\n      if (!force) this.filters.splice(this.filters.indexOf(filter), 1);\n    } else {\n      this.filters.push(filter);\n    }\n    this.beginTime = this.currentTime;\n    this.queues.playSong(this);\n    return this.filters;\n  }\n  /**\n   * Set the playing time to another position\n   * @param {number} time Time in seconds\n   * @returns {Queue} The guild queue\n   */\n  seek(time: number): Queue {\n    if (typeof time !== \"number\") throw new DisTubeError(\"INVALID_TYPE\", \"number\", time, \"time\");\n    if (isNaN(time) || time < 0) throw new DisTubeError(\"NUMBER_COMPARE\", \"time\", \"bigger or equal to\", 0);\n    this.beginTime = time;\n    this.queues.playSong(this);\n    return this;\n  }\n  /**\n   * Add a related song of the playing song to the queue\n   * @returns {Promise<Song>} The added song\n   * @throws {Error}\n   */\n  async addRelatedSong(): Promise<Song> {\n    if (!this.songs?.[0]) throw new DisTubeError(\"NO_PLAYING\");\n    const related = this.songs[0].related.find(v => !this.previousSongs.map(s => s.id).includes(v.id));\n    if (!related || !(related instanceof Song)) throw new DisTubeError(\"NO_RELATED\");\n    const song = await this.handler.resolveSong(related, { member: this.clientMember, metadata: related.metadata });\n    if (!(song instanceof Song)) throw new DisTubeError(\"CANNOT_PLAY_RELATED\");\n    this.addToQueue(song);\n    return song;\n  }\n  /**\n   * Stop the guild stream and delete the queue\n   */\n  async stop() {\n    await this.taskQueue.queuing();\n    try {\n      this.stopped = true;\n      if (this.options.leaveOnStop) this.voice.leave();\n      else this.voice.stop();\n      this.delete();\n    } finally {\n      this.taskQueue.resolve();\n    }\n  }\n  /**\n   * Delete the queue from the manager\n   * (This does not leave the voice channel even if {@link DisTubeOptions|DisTubeOptions.leaveOnStop} is enabled)\n   * @private\n   */\n  delete() {\n    this.stopped = true;\n    this.songs = [];\n    this.previousSongs = [];\n    if (this.listeners) {\n      for (const event of Object.keys(this.listeners) as (keyof DisTubeVoiceEvents)[]) {\n        this.voice.removeListener(event, this.listeners[event]);\n      }\n    }\n    this.queues.delete(this.id);\n    this.emit(\"deleteQueue\", this);\n  }\n  /**\n   * Toggle autoplay mode\n   * @returns {boolean} Autoplay mode state\n   */\n  toggleAutoplay(): boolean {\n    this.autoplay = !this.autoplay;\n    return this.autoplay;\n  }\n}\n"]}