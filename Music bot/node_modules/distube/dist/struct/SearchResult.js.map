{"version":3,"file":"SearchResult.js","sourceRoot":"","sources":["../../src/struct/SearchResult.ts"],"names":[],"mappings":";;;AAAA,0BAA4D;AAG5D,0CAA0C;AAC1C,MAAa,YAAY;IAkBvB;;;OAGG;IACH,YAAY,IAAsB;QAChC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QACxB;;;WAGG;QACH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB;;;WAGG;QACH,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB;;;WAGG;QACH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB;;;WAGG;QACH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzB,IAAI,GAAG,IAAa,CAAC;YACrB;;;eAGG;YACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB;;;eAGG;YACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B;;;eAGG;YACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,YAAQ,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1D;;;eAGG;YACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAA,kBAAc,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9E;;;eAGG;YACH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;SACjC;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;YACnC,MAAM,IAAI,gBAAY,CAAC,cAAc,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;SAC/F;QACD;;;;;WAKG;QACH,IAAI,CAAC,QAAQ,GAAG;YACd,IAAI,EAAE,CAAE,IAAc,CAAC,MAAM,IAAK,IAAiB,CAAC,KAAK,CAAC,EAAE,IAAI;YAChE,GAAG,EAAE,CAAE,IAAc,CAAC,MAAM,IAAK,IAAiB,CAAC,KAAK,CAAC,EAAE,GAAG;SAC/D,CAAC;IACJ,CAAC;CACF;AArFD,oCAqFC","sourcesContent":["import { DisTubeError, formatDuration, toSecond } from \"..\";\nimport type { Playlist, Video } from \"@distube/ytsr\";\n\n/** Class representing a search result. */\nexport class SearchResult {\n  source: \"youtube\";\n  type: \"video\" | \"playlist\";\n  id: string;\n  name: string;\n  url: string;\n  views?: number;\n  isLive?: boolean;\n  duration?: number;\n  formattedDuration?: string;\n  thumbnail?: string;\n  /** Video or playlist uploader */\n  uploader: {\n    /** Uploader name */\n    name?: string;\n    /** Uploader url */\n    url?: string;\n  };\n  /**\n   * Create a search result\n   * @param {Object} info ytsr result\n   */\n  constructor(info: Video | Playlist) {\n    this.source = \"youtube\";\n    /**\n     * Type of SearchResult (`video` or `playlist`)\n     * @type {string}\n     */\n    this.type = info.type;\n    /**\n     * YouTube video or playlist id\n     * @type {string}\n     */\n    this.id = info.id;\n    /**\n     * Video or playlist title.\n     * @type {string}\n     */\n    this.name = info.name;\n    /**\n     * Video or playlist URL.\n     * @type {string}\n     */\n    this.url = info.url;\n    if (this.type === \"video\") {\n      info = info as Video;\n      /**\n       * [Video only] Video or playlist views count\n       * @type {number}\n       */\n      this.views = info.views;\n      /**\n       * [Video only] Indicates if the video is an active live.\n       * @type {boolean?}\n       */\n      this.isLive = info.isLive;\n      /**\n       * [Video only] Video duration.\n       * @type {number}\n       */\n      this.duration = this.isLive ? 0 : toSecond(info.duration);\n      /**\n       * [Video only] Formatted duration string `hh:mm:ss` or `mm:ss`.\n       * @type {string}\n       */\n      this.formattedDuration = this.isLive ? \"Live\" : formatDuration(this.duration);\n      /**\n       * [Video only] Video thumbnail.\n       * @type {string?}\n       */\n      this.thumbnail = info.thumbnail;\n    } else if (this.type !== \"playlist\") {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"video\", \"playlist\"], this.type, \"SearchResult.type\");\n    }\n    /**\n     * Song uploader\n     * @type {Object}\n     * @prop {string?} name Uploader name\n     * @prop {string?} url Uploader url\n     */\n    this.uploader = {\n      name: ((info as Video).author || (info as Playlist).owner)?.name,\n      url: ((info as Video).author || (info as Playlist).owner)?.url,\n    };\n  }\n}\n"]}