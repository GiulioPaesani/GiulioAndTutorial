import { Playlist } from "./Playlist";
import type ytdl from "@distube/ytdl-core";
import type { GuildMember } from "discord.js";
import type { Chapter, OtherSongInfo, RelatedSong, SearchResult } from "..";
/**
 * Class representing a song.
 *
 * <info>If {@link Song} is added from a YouTube {@link SearchResult} or {@link Playlist},
 * some info will be missing to save your resources. It will be filled when emitting {@link DisTube#playSong} event.
 *
 * Missing info: {@link Song#likes}, {@link Song#dislikes}, {@link Song#streamURL},
 * {@link Song#related}, {@link Song#chapters}, {@link Song#age_restricted}</info>
 * @template T - The type for the metadata (if any) of the song
 */
export declare class Song<T = unknown> {
    #private;
    source: string;
    formats?: ytdl.videoFormat[];
    id?: string;
    name?: string;
    isLive: boolean;
    duration: number;
    formattedDuration?: string;
    url: string;
    streamURL?: string;
    thumbnail?: string;
    related: RelatedSong[];
    views: number;
    likes: number;
    dislikes: number;
    uploader: {
        name?: string;
        url?: string;
    };
    age_restricted: boolean;
    chapters: Chapter[];
    reposts: number;
    constructor(info: ytdl.videoInfo | SearchResult | OtherSongInfo | ytdl.relatedVideo);
    /** @deprecated Passing GuildMember for DisTube#Song() is deprecated. */
    constructor(info: ytdl.videoInfo | SearchResult | OtherSongInfo | ytdl.relatedVideo, member?: GuildMember, source?: string, metadata?: T);
    /**
     * Create a Song
     * @param {ytdl.videoInfo|SearchResult|OtherSongInfo} info Raw info
     * @param {Object} [options] Optional options
     * @param {Discord.GuildMember} [options.member] Requested user
     * @param {string} [options.source="youtube"] Song source
     * @param {T} [options.metadata] Song metadata
     */
    constructor(info: ytdl.videoInfo | SearchResult | OtherSongInfo | ytdl.relatedVideo | RelatedSong, options?: {
        member?: GuildMember;
        source?: string;
        metadata?: T;
    });
    _patchYouTube(i: ytdl.videoInfo | SearchResult): void;
    /**
     * Patch data from other source
     * @param {OtherSongInfo} info Video info
     * @private
     */
    _patchOther(info: OtherSongInfo): void;
    /**
     * The playlist added this song
     * @type {Playlist?}
     */
    get playlist(): Playlist | undefined;
    set playlist(playlist: Playlist | undefined);
    /**
     * User requested.
     * @type {Discord.GuildMember?}
     */
    get member(): GuildMember | undefined;
    set member(member: GuildMember | undefined);
    /**
     * User requested.
     * @type {Discord.User?}
     */
    get user(): import("discord.js").User | undefined;
    get metadata(): T;
    set metadata(metadata: T);
}
//# sourceMappingURL=Song.d.ts.map