{"version":3,"file":"wrapper.js","sourceRoot":"","sources":["../src/wrapper.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,kDAA0B;AAC1B,oDAA4B;AAC5B,sDAA8B;AAC9B,gEAAkC;AAClC,+BAAyE;AAGzE,MAAM,WAAW,GAAG,KAAK,EAAE,GAAW,EAAoC,EAAE;IAC1E,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAC/E,IAAI,CAAC,QAAQ,CAAC,UAAU;QAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,GAAG,CAAC,CAAC;IAC9E,IAAI,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC;QAAE,OAAO,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAClG,IAAI,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC;QAAE,OAAO,QAAQ,CAAC;IACpE,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,iBAAiB,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAC;AAEF,MAAM,IAAI,GAAG,CAAC,GAAW,EAAE,KAAK,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAA,eAAK,EAAC,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAEpG,MAAM,GAAG,GAAG,CAAC,GAAW,EAAE,KAAkB,EAAE,OAA+B,EAAE,EAAE,CACtF,IAAA,eAAK,EAAC,gBAAU,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;AADlC,QAAA,GAAG,OAC+B;AAExC,MAAM,IAAI,GAAG,CAAC,GAAW,EAAE,KAAkB,EAAE,OAA+B,EAA0B,EAAE,CAC/G,IAAA,WAAG,EAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AADvD,QAAA,IAAI,QACmD;AAEpE,MAAM,eAAe,GAAG,CAAC,qBAAqB,EAAE,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;AACpG,MAAM,SAAS,GAAG,KAAK,EAAE,GAAW,EAAE,EAAE;IACtC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,CAAC,CAAC;IACxC,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAErD,IAAI,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC;QAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;IAE5F,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC/C,MAAM,EAAE,oBAAoB,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAoB,EAAE,EAAE,CAAC,IAAI,KAAK,oBAAc,CAAC,CAAC;IACtG,OAAO,WAAW,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAClD,MAAM,EAAE,CAAC,CAAC,IAAI;QACd,OAAO,EAAE,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK;KACzD,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEK,MAAM,QAAQ,GAAG,GAAG,EAAE,CAC3B,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,eAAS,CAAC,EAAE,IAAA,gBAAM,EAAC,eAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE;IACpF,kBAAE,CAAC,SAAS,CAAC,gBAAU,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IAChD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC,CAAC;AAJQ,QAAA,QAAQ,YAIhB","sourcesContent":["import dargs from \"dargs\";\nimport execa from \"execa\";\nimport mkdirp from \"mkdirp\";\nimport petitio from \"petitio\";\nimport fs from \"node:fs/promises\";\nimport { YTDLP_DIR, YTDLP_FILENAME, YTDLP_PATH, YTDLP_URL } from \"./env\";\nimport type { YtDlpFlags, YtDlpResponse } from \"./type\";\n\nconst makeRequest = async (url: string): Promise<petitio.PetitioResponse> => {\n  const response = await petitio(url).header({ \"user-agent\": \"distube\" }).send();\n  if (!response.statusCode) throw new Error(`Cannot make requests to '${url}'`);\n  if (response.statusCode.toString().startsWith(\"3\")) return makeRequest(response.headers.location);\n  if (response.statusCode.toString().startsWith(\"2\")) return response;\n  throw new Error(`${url}\\nStatus code ${response.statusCode.toString()}`);\n};\n\nconst args = (url: string, flags = {}) => [url].concat(dargs(flags, { useEquals: false })).filter(Boolean);\n\nexport const raw = (url: string, flags?: YtDlpFlags, options?: execa.Options<string>) =>\n  execa(YTDLP_PATH, args(url, flags), options);\n\nexport const json = (url: string, flags?: YtDlpFlags, options?: execa.Options<string>): Promise<YtDlpResponse> =>\n  raw(url, flags, options).then(({ stdout }) => JSON.parse(stdout));\n\nconst binContentTypes = [\"binary/octet-stream\", \"application/octet-stream\", \"application/x-binary\"];\nconst getBinary = async (url: string) => {\n  const response = await makeRequest(url);\n  const contentType = response.headers[\"content-type\"];\n\n  if (binContentTypes.includes(contentType)) return { buffer: response.body, version: \"N/A\" };\n\n  const [{ assets, tag_name }] = response.json();\n  const { browser_download_url } = assets.find(({ name }: { name: string }) => name === YTDLP_FILENAME);\n  return makeRequest(browser_download_url).then(r => ({\n    buffer: r.body,\n    version: typeof tag_name === \"string\" ? tag_name : \"N/A\",\n  }));\n};\n\nexport const download = () =>\n  Promise.all([getBinary(YTDLP_URL), mkdirp(YTDLP_DIR)]).then(([{ buffer, version }]) => {\n    fs.writeFile(YTDLP_PATH, buffer, { mode: 493 });\n    return version;\n  });\n"]}