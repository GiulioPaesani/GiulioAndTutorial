"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YtDlpPlugin = void 0;
const wrapper_1 = require("./wrapper");
const distube_1 = require("distube");
class YtDlpPlugin extends distube_1.ExtractorPlugin {
    constructor() {
        super();
        (0, wrapper_1.download)().catch(() => undefined);
    }
    validate() {
        return true;
    }
    async resolve(url, { member, metadata }) {
        var _a;
        const info = await (0, wrapper_1.json)(url, {
            dumpSingleJson: true,
            noWarnings: true,
            noCallHome: true,
            preferFreeFormats: true,
            skipDownload: true,
            simulate: true,
        }).catch(e => {
            throw new distube_1.DisTubeError("YTDLP_ERROR", `${e.stderr || e}`);
        });
        if (Array.isArray(info.entries) && info.entries.length > 0) {
            info.source = info.extractor.match(/\w+/)[0];
            info.songs = info.entries.map((i) => new distube_1.Song(i, { member, source: i.extractor, metadata }));
            return new distube_1.Playlist(info, { member, metadata, properties: { source: (_a = info.songs[0]) === null || _a === void 0 ? void 0 : _a.source } });
        }
        return new distube_1.Song(info, { member, source: info.extractor, metadata });
    }
    async getStreamURL(url) {
        const info = await (0, wrapper_1.json)(url, {
            dumpSingleJson: true,
            noWarnings: true,
            noCallHome: true,
            preferFreeFormats: true,
            skipDownload: true,
            simulate: true,
            format: "ba/ba*",
        }).catch(e => {
            throw new distube_1.DisTubeError("YTDLP_ERROR", `${e.stderr || e}`);
        });
        return info.url;
    }
}
exports.YtDlpPlugin = YtDlpPlugin;
//# sourceMappingURL=index.js.map