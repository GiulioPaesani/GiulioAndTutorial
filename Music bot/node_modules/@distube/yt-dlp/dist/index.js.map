{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,uCAA2C;AAC3C,qCAAwE;AAKxE,MAAa,WAAY,SAAQ,yBAAe;IAC9C;QACE,KAAK,EAAE,CAAC;QACR,IAAA,kBAAQ,GAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,EAAE,MAAM,EAAE,QAAQ,EAA4C;;QACvF,MAAM,IAAI,GAAQ,MAAM,IAAA,cAAI,EAAC,GAAG,EAAE;YAChC,cAAc,EAAE,IAAI;YACpB,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,IAAI;YAChB,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;YAClB,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACX,MAAM,IAAI,sBAAY,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAC3B,CAAC,CAA6B,EAAE,EAAE,CAAC,IAAI,cAAI,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,CAC1F,CAAC;YACF,OAAO,IAAI,kBAAQ,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,0CAAE,MAAM,EAAE,EAAE,CAAC,CAAC;SAChG;QACD,OAAO,IAAI,cAAI,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,GAAW;QAC5B,MAAM,IAAI,GAAG,MAAM,IAAA,cAAI,EAAC,GAAG,EAAE;YAC3B,cAAc,EAAE,IAAI;YACpB,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,IAAI;YAChB,iBAAiB,EAAE,IAAI;YACvB,YAAY,EAAE,IAAI;YAClB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,QAAQ;SACjB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACX,MAAM,IAAI,sBAAY,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;CACF;AA7CD,kCA6CC","sourcesContent":["import { download, json } from \"./wrapper\";\nimport { DisTubeError, ExtractorPlugin, Playlist, Song } from \"distube\";\nimport type { OtherSongInfo } from \"distube\";\nimport type { GuildMember } from \"discord.js\";\nimport type { YtResponse } from \"@distube/youtube-dl\";\n\nexport class YtDlpPlugin extends ExtractorPlugin {\n  constructor() {\n    super();\n    download().catch(() => undefined);\n  }\n\n  validate() {\n    return true;\n  }\n\n  async resolve(url: string, { member, metadata }: { member?: GuildMember; metadata?: any }) {\n    const info: any = await json(url, {\n      dumpSingleJson: true,\n      noWarnings: true,\n      noCallHome: true,\n      preferFreeFormats: true,\n      skipDownload: true,\n      simulate: true,\n    }).catch(e => {\n      throw new DisTubeError(\"YTDLP_ERROR\", `${e.stderr || e}`);\n    });\n    if (Array.isArray(info.entries) && info.entries.length > 0) {\n      info.source = info.extractor.match(/\\w+/)[0];\n      info.songs = info.entries.map(\n        (i: OtherSongInfo & YtResponse) => new Song(i, { member, source: i.extractor, metadata }),\n      );\n      return new Playlist(info, { member, metadata, properties: { source: info.songs[0]?.source } });\n    }\n    return new Song(info, { member, source: info.extractor, metadata });\n  }\n\n  async getStreamURL(url: string) {\n    const info = await json(url, {\n      dumpSingleJson: true,\n      noWarnings: true,\n      noCallHome: true,\n      preferFreeFormats: true,\n      skipDownload: true,\n      simulate: true,\n      format: \"ba/ba*\",\n    }).catch(e => {\n      throw new DisTubeError(\"YTDLP_ERROR\", `${e.stderr || e}`);\n    });\n    return info.url;\n  }\n}\n"]}