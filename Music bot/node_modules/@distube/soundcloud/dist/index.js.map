{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"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","sourcesContent":["import SoundCloud from \"soundcloud.ts\";\nimport { DisTubeError, ExtractorPlugin, Playlist, Song } from \"distube\";\nimport type { GuildMember } from \"discord.js\";\nimport type { OtherSongInfo, PlaylistInfo } from \"distube\";\nimport type { SoundcloudPlaylistV2, SoundcloudTrackV2 } from \"soundcloud.ts\";\nconst sc = new SoundCloud();\n\ntype Falsy = undefined | null | false | 0 | \"\";\nconst isTruthy = <T>(x: T | Falsy): x is T => Boolean(x);\ntype ElementOf<A> = A extends readonly (infer T)[] ? T : never;\nconst SEARCH_SUPPORT = [\"track\", \"playlist\"] as const;\n\nconst chunker = (arr: any[], size: number) => {\n  const chunks = [];\n  let i = 0;\n  while (i < arr.length) chunks.push(arr.slice(i, (i += size)));\n  return chunks;\n};\n\nconst resolveTracks = async (tracks: SoundcloudTrackV2[]): Promise<SoundcloudTrackV2[]> => {\n  const unsolved = tracks.splice(tracks.findIndex(t => !t.title));\n  const chunks = chunker(unsolved, 50);\n  const promises = chunks.map(ts => sc.api.getV2(\"/tracks\", { ids: ts.map(t => t.id).join(\",\") }));\n  const solvedTracks = await Promise.all(promises);\n  return tracks.concat(solvedTracks.flat());\n};\n\nexport class SoundCloudPlugin extends ExtractorPlugin {\n  /**\n   * Search for tracks/playlists on SoundCloud\n   * @param {string} query String query\n   * @param {'track'|'playlist'} [type='track'] type\n   * @param {number} [limit=10] limit\n   * @returns {Array<Song>|Array<Playlist>}\n   */\n  static async search(query: string, type: ElementOf<typeof SEARCH_SUPPORT> = \"track\", limit = 10) {\n    if (typeof query !== \"string\") throw new DisTubeError(\"INVALID_TYPE\", \"string\", query, \"query\");\n    if (!SEARCH_SUPPORT.includes(type)) throw new DisTubeError(\"INVALID_TYPE\", SEARCH_SUPPORT, type, \"type\");\n    if (typeof limit !== \"number\" || limit < 1 || Math.floor(limit) !== limit) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"natural number\", limit, \"limit\");\n    }\n    if (type === \"track\") {\n      const data = await sc.tracks.searchV2({ q: query, limit });\n      if (!data?.collection?.length) {\n        throw new DisTubeError(\"SOUNDCLOUD_PLUGIN_NO_RESULT\", `Cannot find any \"${query}\" ${type} on SoundCloud!`);\n      }\n      return data.collection.map(t => new Song(new SoundCloudTrack(t)));\n    }\n    const data = await sc.playlists.searchV2({ q: query, limit });\n    const playlists = data.collection;\n    return (\n      await Promise.all(\n        playlists.map(async p => {\n          const playlist = new SoundCloudPlaylist(p);\n          if (!playlist.tracks?.length) return;\n          playlist.songs = (await resolveTracks(playlist.tracks)).map(s => new Song(new SoundCloudTrack(s)));\n          // eslint-disable-next-line consistent-return\n          return new Playlist(playlist);\n        }),\n      )\n    ).filter(isTruthy);\n  }\n\n  /**\n   * Search for tracks/playlists on SoundCloud\n   * @param {string} query String query\n   * @param {'track'|'playlist'} [type='track'] type\n   * @param {number} [limit=10] limit\n   * @returns {Array<Song>|Array<Playlist>}\n   */\n  search(query: string, type: ElementOf<typeof SEARCH_SUPPORT> = \"track\", limit = 10) {\n    return SoundCloudPlugin.search(query, type, limit);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async validate(url: string) {\n    return /^https?:\\/\\/(?:(?:www|m)\\.)?soundcloud\\.com\\/(.*)$/.test(url);\n  }\n\n  async resolve(url: string, options: { member?: GuildMember; metadata?: any }) {\n    const opt = { ...options, source: \"soundcloud\" };\n    url = url.replace(/:\\/\\/(m|www)\\./g, \"://\");\n    const data = await sc.resolve.getV2(url, true).catch(() => undefined);\n    if (!data || ![\"track\", \"playlist\"].includes(data.kind)) {\n      throw new DisTubeError(\"SOUNDCLOUD_PLUGIN_NOT_SUPPORTED\", \"Only public links are supported.\");\n    }\n    if (data.kind === \"playlist\") {\n      const playlist = new SoundCloudPlaylist(data);\n      if (!playlist.tracks?.length) throw new DisTubeError(\"SOUNDCLOUD_PLUGIN_EMPTY_PLAYLIST\", \"Playlist is empty.\");\n      playlist.songs = (await resolveTracks(playlist.tracks)).map(s => new Song(new SoundCloudTrack(s), opt));\n      return new Playlist(playlist, opt);\n    } else {\n      return new Song(new SoundCloudTrack(data), opt);\n    }\n  }\n\n  async getRelatedSongs(url: string | number) {\n    const related = await sc.tracks.relatedV2(url, 10);\n    return related.filter(t => t.title).map(t => new Song(new SoundCloudTrack(t)));\n  }\n\n  async getStreamURL(url: string) {\n    const stream = await sc.util.streamLink(url);\n    if (!stream) {\n      throw new DisTubeError(\n        \"SOUNDCLOUD_PLUGIN_RATE_LIMITED\",\n        \"Reached SoundCloud rate limits\\nSee more: https://developers.soundcloud.com/docs/api/rate-limits#play-requests\",\n      );\n    }\n    return stream;\n  }\n}\n\nclass SoundCloudTrack implements OtherSongInfo {\n  src: \"soundcloud\";\n  id: string;\n  name: string;\n  url: string;\n  thumbnail: string;\n  duration: number;\n  views: number;\n  reposts: number;\n  uploader: string;\n  uploader_url: string;\n  constructor(info: SoundcloudTrackV2) {\n    this.src = \"soundcloud\";\n    this.id = info.id.toString();\n    this.name = info.title;\n    this.url = info.permalink_url;\n    this.thumbnail = info.artwork_url;\n    this.duration = info.duration / 1000;\n    this.views = info.playback_count;\n    this.reposts = info.reposts_count;\n    this.uploader = info.user?.username;\n    this.uploader_url = info.user?.permalink_url;\n  }\n}\n\nclass SoundCloudPlaylist implements PlaylistInfo {\n  source: \"soundcloud\";\n  songs!: Song[];\n  id: number;\n  name: string;\n  url: string;\n  thumbnail?: string;\n  tracks: SoundcloudTrackV2[];\n  constructor(info: SoundcloudPlaylistV2) {\n    this.source = \"soundcloud\";\n    this.id = info.id;\n    this.name = info.title;\n    this.url = info.permalink_url;\n    this.thumbnail = info.artwork_url ?? undefined;\n    this.tracks = info.tracks;\n  }\n}\n\nexport default SoundCloudPlugin;\n"]}