{"version":3,"sources":["../src/index.ts","../src/messages/embed/Assertions.ts","../src/messages/embed/UnsafeEmbed.ts","../src/messages/embed/Embed.ts","../src/messages/formatters.ts","../src/components/Assertions.ts","../src/components/selectMenu/UnsafeSelectMenuOption.ts","../src/components/ActionRow.ts","../src/components/Component.ts","../src/components/Components.ts","../src/components/button/UnsafeButton.ts","../src/components/button/Button.ts","../src/components/textInput/Assertions.ts","../src/components/textInput/UnsafeTextInput.ts","../src/components/textInput/TextInput.ts","../src/interactions/modals/UnsafeModal.ts","../src/interactions/modals/Assertions.ts","../src/interactions/modals/Modal.ts","../src/components/selectMenu/UnsafeSelectMenu.ts","../src/components/selectMenu/SelectMenu.ts","../src/components/selectMenu/SelectMenuOption.ts","../src/interactions/slashCommands/Assertions.ts","../src/interactions/slashCommands/SlashCommandBuilder.ts","../src/interactions/slashCommands/SlashCommandSubcommands.ts","../src/interactions/slashCommands/mixins/NameAndDescription.ts","../src/interactions/slashCommands/options/attachment.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts","../src/interactions/slashCommands/options/boolean.ts","../src/interactions/slashCommands/options/channel.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts","../src/interactions/slashCommands/options/integer.ts","../src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts","../src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts","../src/interactions/slashCommands/options/mentionable.ts","../src/interactions/slashCommands/options/number.ts","../src/interactions/slashCommands/options/role.ts","../src/interactions/slashCommands/options/string.ts","../src/interactions/slashCommands/options/user.ts","../src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts","../src/interactions/contextMenuCommands/Assertions.ts","../src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts","../src/util/jsonEncodable.ts","../src/util/equatable.ts","../src/util/componentUtil.ts"],"sourcesContent":["export * as EmbedAssertions from './messages/embed/Assertions';\nexport * from './messages/embed/Embed';\nexport * from './messages/formatters';\nexport * from './messages/embed/UnsafeEmbed';\n\nexport * as ComponentAssertions from './components/Assertions';\nexport * from './components/ActionRow';\nexport * from './components/button/Button';\nexport * from './components/Component';\nexport * from './components/Components';\nexport * from './components/textInput/TextInput';\nexport * as TextInputAssertions from './components/textInput/Assertions';\nexport * from './components/textInput/UnsafeTextInput';\nexport * from './interactions/modals/UnsafeModal';\nexport * from './interactions/modals/Modal';\nexport * as ModalAssertions from './interactions/modals/Assertions';\nexport * from './components/selectMenu/SelectMenu';\nexport * from './components/selectMenu/SelectMenuOption';\nexport * from './components/button/UnsafeButton';\nexport * from './components/selectMenu/UnsafeSelectMenu';\nexport * from './components/selectMenu/UnsafeSelectMenuOption';\n\nexport * as SlashCommandAssertions from './interactions/slashCommands/Assertions';\nexport * from './interactions/slashCommands/SlashCommandBuilder';\nexport * from './interactions/slashCommands/SlashCommandSubcommands';\nexport * from './interactions/slashCommands/options/boolean';\nexport * from './interactions/slashCommands/options/channel';\nexport * from './interactions/slashCommands/options/integer';\nexport * from './interactions/slashCommands/options/mentionable';\nexport * from './interactions/slashCommands/options/number';\nexport * from './interactions/slashCommands/options/role';\nexport * from './interactions/slashCommands/options/attachment';\nexport * from './interactions/slashCommands/options/string';\nexport * from './interactions/slashCommands/options/user';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionBase';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin';\nexport * from './interactions/slashCommands/mixins/NameAndDescription';\nexport * from './interactions/slashCommands/mixins/SharedSlashCommandOptions';\n\nexport * as ContextMenuCommandAssertions from './interactions/contextMenuCommands/Assertions';\nexport * from './interactions/contextMenuCommands/ContextMenuCommandBuilder';\n\nexport * from './util/jsonEncodable';\nexport * from './util/equatable';\nexport * from './util/componentUtil';\n","import { s } from '@sapphire/shapeshift';\nimport type { APIEmbedField } from 'discord-api-types/v10';\n\nexport const fieldNamePredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(256);\n\nexport const fieldValuePredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(1024);\n\nexport const fieldInlinePredicate = s.boolean.optional;\n\nexport const embedFieldPredicate = s.object({\n\tname: fieldNamePredicate,\n\tvalue: fieldValuePredicate,\n\tinline: fieldInlinePredicate,\n});\n\nexport const embedFieldsArrayPredicate = embedFieldPredicate.array;\n\nexport const fieldLengthPredicate = s.number.lessThanOrEqual(25);\n\nexport function validateFieldLength(amountAdding: number, fields?: APIEmbedField[]): void {\n\tfieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);\n}\n\nexport const authorNamePredicate = fieldNamePredicate.nullable;\n\nexport const imageURLPredicate = s.string.url({\n\tallowedProtocols: ['http:', 'https:', 'attachment:'],\n}).nullish;\n\nexport const urlPredicate = s.string.url({\n\tallowedProtocols: ['http:', 'https:'],\n}).nullish;\n\nexport const embedAuthorPredicate = s.object({\n\tname: authorNamePredicate,\n\ticonURL: imageURLPredicate,\n\turl: urlPredicate,\n});\n\nexport const RGBPredicate = s.number.int.greaterThanOrEqual(0).lessThanOrEqual(255);\nexport const colorPredicate = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(0xffffff)\n\t.or(s.tuple([RGBPredicate, RGBPredicate, RGBPredicate])).nullable;\n\nexport const descriptionPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(4096).nullable;\n\nexport const footerTextPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(2048).nullable;\n\nexport const embedFooterPredicate = s.object({\n\ttext: footerTextPredicate,\n\ticonURL: imageURLPredicate,\n});\n\nexport const timestampPredicate = s.union(s.number, s.date).nullable;\n\nexport const titlePredicate = fieldNamePredicate.nullable;\n","import type { APIEmbed, APIEmbedAuthor, APIEmbedField, APIEmbedFooter, APIEmbedImage } from 'discord-api-types/v10';\n\nexport type RGBTuple = [red: number, green: number, blue: number];\n\nexport interface IconData {\n\t/**\n\t * The URL of the icon\n\t */\n\ticonURL?: string;\n\t/**\n\t * The proxy URL of the icon\n\t */\n\tproxyIconURL?: string;\n}\n\nexport type EmbedAuthorData = Omit<APIEmbedAuthor, 'icon_url' | 'proxy_icon_url'> & IconData;\n\nexport type EmbedAuthorOptions = Omit<EmbedAuthorData, 'proxyIconURL'>;\n\nexport type EmbedFooterData = Omit<APIEmbedFooter, 'icon_url' | 'proxy_icon_url'> & IconData;\n\nexport type EmbedFooterOptions = Omit<EmbedFooterData, 'proxyIconURL'>;\n\nexport interface EmbedImageData extends Omit<APIEmbedImage, 'proxy_url'> {\n\t/**\n\t * The proxy URL for the image\n\t */\n\tproxyURL?: string;\n}\n\n/**\n * Represents a non-validated embed in a message (image/video preview, rich embed, etc.)\n */\nexport class UnsafeEmbedBuilder {\n\tpublic readonly data: APIEmbed;\n\n\tpublic constructor(data: APIEmbed = {}) {\n\t\tthis.data = { ...data };\n\t\tif (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();\n\t}\n\n\t/**\n\t * Adds fields to the embed (max 25)\n\t *\n\t * @param fields The fields to add\n\t */\n\tpublic addFields(fields: APIEmbedField[]): this {\n\t\tif (this.data.fields) this.data.fields.push(...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts fields in the embed (max 25)\n\t *\n\t * @param index The index to start at\n\t * @param deleteCount The number of fields to remove\n\t * @param fields The replacing field objects\n\t */\n\tpublic spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\tif (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the embed's fields (max 25).\n\t * @param fields The fields to set\n\t */\n\tpublic setFields(fields: APIEmbedField[]) {\n\t\tthis.spliceFields(0, this.data.fields?.length ?? 0, ...fields);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the author of this embed\n\t *\n\t * @param options The options for the author\n\t */\n\tpublic setAuthor(options: EmbedAuthorOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.author = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.data.author = { name: options.name, url: options.url, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the color of this embed\n\t *\n\t * @param color The color of the embed\n\t */\n\tpublic setColor(color: number | RGBTuple | null): this {\n\t\tif (Array.isArray(color)) {\n\t\t\tconst [red, green, blue] = color;\n\t\t\tthis.data.color = (red << 16) + (green << 8) + blue;\n\t\t\treturn this;\n\t\t}\n\t\tthis.data.color = color ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this embed\n\t *\n\t * @param description The description\n\t */\n\tpublic setDescription(description: string | null): this {\n\t\tthis.data.description = description ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the footer of this embed\n\t *\n\t * @param options The options for the footer\n\t */\n\tpublic setFooter(options: EmbedFooterOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.footer = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.data.footer = { text: options.text, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the image of this embed\n\t *\n\t * @param url The URL of the image\n\t */\n\tpublic setImage(url: string | null): this {\n\t\tthis.data.image = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the thumbnail of this embed\n\t *\n\t * @param url The URL of the thumbnail\n\t */\n\tpublic setThumbnail(url: string | null): this {\n\t\tthis.data.thumbnail = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the timestamp of this embed\n\t *\n\t * @param timestamp The timestamp or date\n\t */\n\tpublic setTimestamp(timestamp: number | Date | null = Date.now()): this {\n\t\tthis.data.timestamp = timestamp ? new Date(timestamp).toISOString() : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the title of this embed\n\t *\n\t * @param title The title\n\t */\n\tpublic setTitle(title: string | null): this {\n\t\tthis.data.title = title ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL of this embed\n\t *\n\t * @param url The URL\n\t */\n\tpublic setURL(url: string | null): this {\n\t\tthis.data.url = url ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transforms the embed to a plain object\n\t */\n\tpublic toJSON(): APIEmbed {\n\t\treturn { ...this.data };\n\t}\n}\n","import type { APIEmbedField } from 'discord-api-types/v10';\nimport {\n\tcolorPredicate,\n\tdescriptionPredicate,\n\tembedAuthorPredicate,\n\tembedFieldsArrayPredicate,\n\tembedFooterPredicate,\n\timageURLPredicate,\n\ttimestampPredicate,\n\ttitlePredicate,\n\turlPredicate,\n\tvalidateFieldLength,\n} from './Assertions';\nimport { EmbedAuthorOptions, EmbedFooterOptions, RGBTuple, UnsafeEmbedBuilder } from './UnsafeEmbed';\n\n/**\n * Represents a validated embed in a message (image/video preview, rich embed, etc.)\n */\nexport class EmbedBuilder extends UnsafeEmbedBuilder {\n\tpublic override addFields(fields: APIEmbedField[]): this {\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(fields.length, this.data.fields);\n\n\t\t// Data assertions\n\t\treturn super.addFields(embedFieldsArrayPredicate.parse(fields));\n\t}\n\n\tpublic override spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(fields.length - deleteCount, this.data.fields);\n\n\t\t// Data assertions\n\t\treturn super.spliceFields(index, deleteCount, ...embedFieldsArrayPredicate.parse(fields));\n\t}\n\n\tpublic override setAuthor(options: EmbedAuthorOptions | null): this {\n\t\tif (options === null) {\n\t\t\treturn super.setAuthor(null);\n\t\t}\n\n\t\t// Data assertions\n\t\tembedAuthorPredicate.parse(options);\n\n\t\treturn super.setAuthor(options);\n\t}\n\n\tpublic override setColor(color: number | RGBTuple | null): this {\n\t\t// Data assertions\n\t\treturn super.setColor(colorPredicate.parse(color));\n\t}\n\n\tpublic override setDescription(description: string | null): this {\n\t\t// Data assertions\n\t\treturn super.setDescription(descriptionPredicate.parse(description));\n\t}\n\n\tpublic override setFooter(options: EmbedFooterOptions | null): this {\n\t\tif (options === null) {\n\t\t\treturn super.setFooter(null);\n\t\t}\n\n\t\t// Data assertions\n\t\tembedFooterPredicate.parse(options);\n\n\t\treturn super.setFooter(options);\n\t}\n\n\tpublic override setImage(url: string | null): this {\n\t\t// Data assertions\n\t\treturn super.setImage(imageURLPredicate.parse(url)!);\n\t}\n\n\tpublic override setThumbnail(url: string | null): this {\n\t\t// Data assertions\n\t\treturn super.setThumbnail(imageURLPredicate.parse(url)!);\n\t}\n\n\tpublic override setTimestamp(timestamp: number | Date | null = Date.now()): this {\n\t\t// Data assertions\n\t\treturn super.setTimestamp(timestampPredicate.parse(timestamp));\n\t}\n\n\tpublic override setTitle(title: string | null): this {\n\t\t// Data assertions\n\t\treturn super.setTitle(titlePredicate.parse(title));\n\t}\n\n\tpublic override setURL(url: string | null): this {\n\t\t// Data assertions\n\t\treturn super.setURL(urlPredicate.parse(url)!);\n\t}\n}\n","import type { URL } from 'url';\nimport type { Snowflake } from 'discord-api-types/globals';\n\n/**\n * Wraps the content inside a codeblock with no language\n *\n * @param content The content to wrap\n */\nexport function codeBlock<C extends string>(content: C): `\\`\\`\\`\\n${C}\\`\\`\\``;\n\n/**\n * Wraps the content inside a codeblock with the specified language\n *\n * @param language The language for the codeblock\n * @param content The content to wrap\n */\nexport function codeBlock<L extends string, C extends string>(language: L, content: C): `\\`\\`\\`${L}\\n${C}\\`\\`\\``;\nexport function codeBlock(language: string, content?: string): string {\n\treturn typeof content === 'undefined' ? `\\`\\`\\`\\n${language}\\`\\`\\`` : `\\`\\`\\`${language}\\n${content}\\`\\`\\``;\n}\n\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code\n *\n * @param content The content to wrap\n */\nexport function inlineCode<C extends string>(content: C): `\\`${C}\\`` {\n\treturn `\\`${content}\\``;\n}\n\n/**\n * Formats the content into italic text\n *\n * @param content The content to wrap\n */\nexport function italic<C extends string>(content: C): `_${C}_` {\n\treturn `_${content}_`;\n}\n\n/**\n * Formats the content into bold text\n *\n * @param content The content to wrap\n */\nexport function bold<C extends string>(content: C): `**${C}**` {\n\treturn `**${content}**`;\n}\n\n/**\n * Formats the content into underscored text\n *\n * @param content The content to wrap\n */\nexport function underscore<C extends string>(content: C): `__${C}__` {\n\treturn `__${content}__`;\n}\n\n/**\n * Formats the content into strike-through text\n *\n * @param content The content to wrap\n */\nexport function strikethrough<C extends string>(content: C): `~~${C}~~` {\n\treturn `~~${content}~~`;\n}\n\n/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content The content to wrap\n */\nexport function quote<C extends string>(content: C): `> ${C}` {\n\treturn `> ${content}`;\n}\n\n/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content The content to wrap\n */\nexport function blockQuote<C extends string>(content: C): `>>> ${C}` {\n\treturn `>>> ${content}`;\n}\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url The URL to wrap\n */\nexport function hideLinkEmbed<C extends string>(url: C): `<${C}>`;\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url The URL to wrap\n */\nexport function hideLinkEmbed(url: URL): `<${string}>`;\nexport function hideLinkEmbed(url: string | URL) {\n\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\treturn `<${url}>`;\n}\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n */\nexport function hyperlink<C extends string>(content: C, url: URL): `[${C}](${string})`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n */\nexport function hyperlink<C extends string, U extends string>(content: C, url: U): `[${C}](${U})`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n * @param title The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, T extends string>(\n\tcontent: C,\n\turl: URL,\n\ttitle: T,\n): `[${C}](${string} \"${T}\")`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content The content to display\n * @param url The URL the content links to\n * @param title The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, U extends string, T extends string>(\n\tcontent: C,\n\turl: U,\n\ttitle: T,\n): `[${C}](${U} \"${T}\")`;\nexport function hyperlink(content: string, url: string | URL, title?: string) {\n\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\treturn title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n\n/**\n * Wraps the content inside spoiler (hidden text)\n *\n * @param content The content to wrap\n */\nexport function spoiler<C extends string>(content: C): `||${C}||` {\n\treturn `||${content}||`;\n}\n\n/**\n * Formats a user ID into a user mention\n *\n * @param userId The user ID to format\n */\nexport function userMention<C extends Snowflake>(userId: C): `<@${C}>` {\n\treturn `<@${userId}>`;\n}\n\n/**\n * Formats a channel ID into a channel mention\n *\n * @param channelId The channel ID to format\n */\nexport function channelMention<C extends Snowflake>(channelId: C): `<#${C}>` {\n\treturn `<#${channelId}>`;\n}\n\n/**\n * Formats a role ID into a role mention\n *\n * @param roleId The role ID to format\n */\nexport function roleMention<C extends Snowflake>(roleId: C): `<@&${C}>` {\n\treturn `<@&${roleId}>`;\n}\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId The emoji ID to format\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: false): `<:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId The emoji ID to format\n * @param animated Whether the emoji is animated or not. Defaults to `false`\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: true): `<a:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId The emoji ID to format\n * @param animated Whether the emoji is animated or not. Defaults to `false`\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated = false): `<a:_:${C}>` | `<:_:${C}>` {\n\treturn `<${animated ? 'a' : ''}:_:${emojiId}>`;\n}\n\n/**\n * Formats a date into a short date-time string\n *\n * @param date The date to format, defaults to the current time\n */\nexport function time(date?: Date): `<t:${bigint}>`;\n\n/**\n * Formats a date given a format style\n *\n * @param date The date to format\n * @param style The style to use\n */\nexport function time<S extends TimestampStylesString>(date: Date, style: S): `<t:${bigint}:${S}>`;\n\n/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds The time to format, represents an UNIX timestamp in seconds\n */\nexport function time<C extends number>(seconds: C): `<t:${C}>`;\n\n/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds The time to format, represents an UNIX timestamp in seconds\n * @param style The style to use\n */\nexport function time<C extends number, S extends TimestampStylesString>(seconds: C, style: S): `<t:${C}:${S}>`;\nexport function time(timeOrSeconds?: number | Date, style?: TimestampStylesString): string {\n\tif (typeof timeOrSeconds !== 'number') {\n\t\ttimeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1000);\n\t}\n\n\treturn typeof style === 'string' ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n\n/**\n * The [message formatting timestamp styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord\n */\nexport const TimestampStyles = {\n\t/**\n\t * Short time format, consisting of hours and minutes, e.g. 16:20\n\t */\n\tShortTime: 't',\n\n\t/**\n\t * Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30\n\t */\n\tLongTime: 'T',\n\n\t/**\n\t * Short date format, consisting of day, month, and year, e.g. 20/04/2021\n\t */\n\tShortDate: 'd',\n\n\t/**\n\t * Long date format, consisting of day, month, and year, e.g. 20 April 2021\n\t */\n\tLongDate: 'D',\n\n\t/**\n\t * Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20\n\t */\n\tShortDateTime: 'f',\n\n\t/**\n\t * Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20\n\t */\n\tLongDateTime: 'F',\n\n\t/**\n\t * Relative time format, consisting of a relative duration format, e.g. 2 months ago\n\t */\n\tRelativeTime: 'R',\n} as const;\n\n/**\n * The possible values, see {@link TimestampStyles} for more information\n */\nexport type TimestampStylesString = typeof TimestampStyles[keyof typeof TimestampStyles];\n\n/**\n * An enum with all the available faces from Discord's native slash commands\n */\nexport enum Faces {\n\t/**\n\t * ¯\\\\_(ツ)\\\\_/¯\n\t */\n\tShrug = '¯\\\\_(ツ)\\\\_/¯',\n\n\t/**\n\t * (╯°□°）╯︵ ┻━┻\n\t */\n\tTableflip = '(╯°□°）╯︵ ┻━┻',\n\n\t/**\n\t * ┬─┬ ノ( ゜-゜ノ)\n\t */\n\tUnflip = '┬─┬ ノ( ゜-゜ノ)',\n}\n","import { s } from '@sapphire/shapeshift';\nimport { APIMessageComponentEmoji, ButtonStyle } from 'discord-api-types/v10';\nimport type { SelectMenuOptionBuilder } from './selectMenu/SelectMenuOption';\nimport { UnsafeSelectMenuOptionBuilder } from './selectMenu/UnsafeSelectMenuOption';\n\nexport const customIdValidator = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\n\nexport const emojiValidator = s.object({\n\tid: s.string,\n\tname: s.string,\n\tanimated: s.boolean,\n}).partial.strict;\n\nexport const disabledValidator = s.boolean;\n\nexport const buttonLabelValidator = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(80);\n\nexport const buttonStyleValidator = s.nativeEnum(ButtonStyle);\n\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(150);\nexport const minMaxValidator = s.number.int.greaterThanOrEqual(0).lessThanOrEqual(25);\n\nexport const labelValueDescriptionValidator = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nexport const optionValidator = s.union(\n\ts.object({\n\t\tlabel: labelValueDescriptionValidator,\n\t\tvalue: labelValueDescriptionValidator,\n\t\tdescription: labelValueDescriptionValidator.optional,\n\t\temoji: emojiValidator.optional,\n\t\tdefault: s.boolean.optional,\n\t}),\n\ts.instance(UnsafeSelectMenuOptionBuilder),\n);\nexport const optionsValidator = optionValidator.array.lengthGreaterThanOrEqual(0);\nexport const optionsLengthValidator = s.number.int.greaterThanOrEqual(0).lessThanOrEqual(25);\n\nexport function validateRequiredSelectMenuParameters(options: SelectMenuOptionBuilder[], customId?: string) {\n\tcustomIdValidator.parse(customId);\n\toptionsValidator.parse(options);\n}\n\nexport const labelValueValidator = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nexport const defaultValidator = s.boolean;\n\nexport function validateRequiredSelectMenuOptionParameters(label?: string, value?: string) {\n\tlabelValueValidator.parse(label);\n\tlabelValueValidator.parse(value);\n}\n\nexport const urlValidator = s.string.url({\n\tallowedProtocols: ['http:', 'https:', 'discord:'],\n});\n\nexport function validateRequiredButtonParameters(\n\tstyle?: ButtonStyle,\n\tlabel?: string,\n\temoji?: APIMessageComponentEmoji,\n\tcustomId?: string,\n\turl?: string,\n) {\n\tif (url && customId) {\n\t\tthrow new RangeError('URL and custom id are mutually exclusive');\n\t}\n\n\tif (!label && !emoji) {\n\t\tthrow new RangeError('Buttons must have a label and/or an emoji');\n\t}\n\n\tif (style === ButtonStyle.Link) {\n\t\tif (!url) {\n\t\t\tthrow new RangeError('Link buttons must have a url');\n\t\t}\n\t} else if (url) {\n\t\tthrow new RangeError('Non-link buttons cannot have a url');\n\t}\n}\n","import type { APIMessageComponentEmoji, APISelectMenuOption } from 'discord-api-types/v10';\n\n/**\n * Represents a non-validated option within a select menu component\n */\nexport class UnsafeSelectMenuOptionBuilder {\n\tpublic constructor(public data: Partial<APISelectMenuOption> = {}) {}\n\n\t/**\n\t * Sets the label of this option\n\t * @param label The label to show on this option\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = label;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of this option\n\t * @param value The value of this option\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this option.\n\t * @param description The description of this option\n\t */\n\tpublic setDescription(description: string) {\n\t\tthis.data.description = description;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this option is selected by default\n\t * @param isDefault Whether this option is selected by default\n\t */\n\tpublic setDefault(isDefault = true) {\n\t\tthis.data.default = isDefault;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display on this option\n\t * @param emoji The emoji to display on this option\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emoji;\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APISelectMenuOption {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APISelectMenuOption;\n\t}\n}\n","import {\n\ttype APIActionRowComponent,\n\tComponentType,\n\tAPIMessageActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { ComponentBuilder } from './Component';\nimport { createComponentBuilder } from './Components';\nimport type { ButtonBuilder, SelectMenuBuilder, TextInputBuilder } from '..';\n\nexport type MessageComponentBuilder =\n\t| MessageActionRowComponentBuilder\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>;\nexport type ModalComponentBuilder = ModalActionRowComponentBuilder | ActionRowBuilder<ModalActionRowComponentBuilder>;\nexport type MessageActionRowComponentBuilder = ButtonBuilder | SelectMenuBuilder;\nexport type ModalActionRowComponentBuilder = TextInputBuilder;\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * Represents an action row component\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row\n\t */\n\tpublic readonly components: T[];\n\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((c) => createComponentBuilder(c)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t * @param components The components to add to this action row.\n\t * @returns\n\t */\n\tpublic addComponents(components: T[]) {\n\t\tthis.components.push(...components);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this action row\n\t * @param components The components to set this row to\n\t */\n\tpublic setComponents(components: T[]) {\n\t\tthis.components.splice(0, this.components.length, ...components);\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n","import type {\n\tAPIActionRowComponent,\n\tAPIActionRowComponentTypes,\n\tAPIBaseComponent,\n\tComponentType,\n} from 'discord-api-types/v10';\nimport type { JSONEncodable } from '../util/jsonEncodable';\n\nexport type AnyAPIActionRowComponent = APIActionRowComponentTypes | APIActionRowComponent<APIActionRowComponentTypes>;\n\n/**\n * Represents a discord component\n */\nexport abstract class ComponentBuilder<\n\tDataType extends Partial<APIBaseComponent<ComponentType>> = APIBaseComponent<ComponentType>,\n> implements JSONEncodable<AnyAPIActionRowComponent>\n{\n\t/**\n\t * The API data associated with this component\n\t */\n\tpublic readonly data: Partial<DataType>;\n\n\tpublic abstract toJSON(): AnyAPIActionRowComponent;\n\n\tpublic constructor(data: Partial<DataType>) {\n\t\tthis.data = data;\n\t}\n}\n","import { APIMessageComponent, APIModalComponent, ComponentType } from 'discord-api-types/v10';\nimport type { AnyComponentBuilder, MessageComponentBuilder, ModalComponentBuilder } from './ActionRow';\nimport { ActionRowBuilder, ButtonBuilder, ComponentBuilder, SelectMenuBuilder, TextInputBuilder } from '../index';\n\nexport interface MappedComponentTypes {\n\t[ComponentType.ActionRow]: ActionRowBuilder<AnyComponentBuilder>;\n\t[ComponentType.Button]: ButtonBuilder;\n\t[ComponentType.SelectMenu]: SelectMenuBuilder;\n\t[ComponentType.TextInput]: TextInputBuilder;\n}\n\n/**\n * Factory for creating components from API data\n * @param data The api data to transform to a component class\n */\nexport function createComponentBuilder<T extends keyof MappedComponentTypes>(\n\tdata: (APIMessageComponent | APIModalComponent) & { type: T },\n): MappedComponentTypes[T];\nexport function createComponentBuilder<C extends MessageComponentBuilder | ModalComponentBuilder>(data: C): C;\nexport function createComponentBuilder(\n\tdata: APIMessageComponent | APIModalComponent | MessageComponentBuilder,\n): ComponentBuilder {\n\tif (data instanceof ComponentBuilder) {\n\t\treturn data;\n\t}\n\n\tswitch (data.type) {\n\t\tcase ComponentType.ActionRow:\n\t\t\treturn new ActionRowBuilder(data);\n\t\tcase ComponentType.Button:\n\t\t\treturn new ButtonBuilder(data);\n\t\tcase ComponentType.SelectMenu:\n\t\t\treturn new SelectMenuBuilder(data);\n\t\tcase ComponentType.TextInput:\n\t\t\treturn new TextInputBuilder(data);\n\t\tdefault:\n\t\t\t// @ts-expect-error\n\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\tthrow new Error(`Cannot properly serialize component type: ${data.type}`);\n\t}\n}\n","import {\n\tComponentType,\n\tButtonStyle,\n\ttype APIMessageComponentEmoji,\n\ttype APIButtonComponent,\n\ttype APIButtonComponentWithURL,\n\ttype APIButtonComponentWithCustomId,\n} from 'discord-api-types/v10';\nimport { ComponentBuilder } from '../Component';\n\n/**\n * Represents a non-validated button component\n */\nexport class UnsafeButtonBuilder extends ComponentBuilder<APIButtonComponent> {\n\tpublic constructor(data?: Partial<APIButtonComponent>) {\n\t\tsuper({ type: ComponentType.Button, ...data });\n\t}\n\n\t/**\n\t * Sets the style of this button\n\t * @param style The style of the button\n\t */\n\tpublic setStyle(style: ButtonStyle) {\n\t\tthis.data.style = style;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL for this button\n\t * @param url The URL to open when this button is clicked\n\t */\n\tpublic setURL(url: string) {\n\t\t(this.data as APIButtonComponentWithURL).url = url;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom Id for this button\n\t * @param customId The custom id to use for this button\n\t */\n\tpublic setCustomId(customId: string) {\n\t\t(this.data as APIButtonComponentWithCustomId).custom_id = customId;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display on this button\n\t * @param emoji The emoji to display on this button\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emoji;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this button is disable or not\n\t * @param disabled Whether or not to disable this button or not\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabled;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this button\n\t * @param label The label to display on this button\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = label;\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIButtonComponent {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APIButtonComponent;\n\t}\n}\n","import type {\n\tButtonStyle,\n\tAPIMessageComponentEmoji,\n\tAPIButtonComponent,\n\tAPIButtonComponentWithCustomId,\n\tAPIButtonComponentWithURL,\n} from 'discord-api-types/v10';\nimport { UnsafeButtonBuilder } from './UnsafeButton';\nimport {\n\tbuttonLabelValidator,\n\tbuttonStyleValidator,\n\tcustomIdValidator,\n\tdisabledValidator,\n\temojiValidator,\n\turlValidator,\n\tvalidateRequiredButtonParameters,\n} from '../Assertions';\n\n/**\n * Represents a validated button component\n */\nexport class ButtonBuilder extends UnsafeButtonBuilder {\n\tpublic override setStyle(style: ButtonStyle) {\n\t\treturn super.setStyle(buttonStyleValidator.parse(style));\n\t}\n\n\tpublic override setURL(url: string) {\n\t\treturn super.setURL(urlValidator.parse(url));\n\t}\n\n\tpublic override setCustomId(customId: string) {\n\t\treturn super.setCustomId(customIdValidator.parse(customId));\n\t}\n\n\tpublic override setEmoji(emoji: APIMessageComponentEmoji) {\n\t\treturn super.setEmoji(emojiValidator.parse(emoji));\n\t}\n\n\tpublic override setDisabled(disabled = true) {\n\t\treturn super.setDisabled(disabledValidator.parse(disabled));\n\t}\n\n\tpublic override setLabel(label: string) {\n\t\treturn super.setLabel(buttonLabelValidator.parse(label));\n\t}\n\n\tpublic override toJSON(): APIButtonComponent {\n\t\tvalidateRequiredButtonParameters(\n\t\t\tthis.data.style,\n\t\t\tthis.data.label,\n\t\t\tthis.data.emoji,\n\t\t\t(this.data as APIButtonComponentWithCustomId).custom_id,\n\t\t\t(this.data as APIButtonComponentWithURL).url,\n\t\t);\n\t\treturn super.toJSON();\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { TextInputStyle } from 'discord-api-types/v10';\nimport { customIdValidator } from '../Assertions';\n\nexport const textInputStyleValidator = s.nativeEnum(TextInputStyle);\nexport const minLengthValidator = s.number.int.greaterThanOrEqual(0).lessThanOrEqual(4000);\nexport const maxLengthValidator = s.number.int.greaterThanOrEqual(1).lessThanOrEqual(4000);\nexport const requiredValidator = s.boolean;\nexport const valueValidator = s.string.lengthLessThanOrEqual(4000);\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(100);\nexport const labelValidator = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45);\n\nexport function validateRequiredParameters(customId?: string, style?: TextInputStyle, label?: string) {\n\tcustomIdValidator.parse(customId);\n\ttextInputStyleValidator.parse(style);\n\tlabelValidator.parse(label);\n}\n","import { ComponentType, type TextInputStyle, type APITextInputComponent } from 'discord-api-types/v10';\nimport isEqual from 'fast-deep-equal';\nimport { ComponentBuilder } from '../../index';\n\nexport class UnsafeTextInputBuilder extends ComponentBuilder<APITextInputComponent> {\n\tpublic constructor(data?: APITextInputComponent & { type?: ComponentType.TextInput }) {\n\t\tsuper({ type: ComponentType.TextInput, ...data });\n\t}\n\n\t/**\n\t * Sets the custom id for this text input\n\t * @param customId The custom id of this text input\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customId;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this text input\n\t * @param label The label for this text input\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = label;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the style for this text input\n\t * @param style The style for this text input\n\t */\n\tpublic setStyle(style: TextInputStyle) {\n\t\tthis.data.style = style;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum length of text for this text input\n\t * @param minLength The minimum length of text for this text input\n\t */\n\tpublic setMinLength(minLength: number) {\n\t\tthis.data.min_length = minLength;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum length of text for this text input\n\t * @param maxLength The maximum length of text for this text input\n\t */\n\tpublic setMaxLength(maxLength: number) {\n\t\tthis.data.max_length = maxLength;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the placeholder of this text input\n\t * @param placeholder The placeholder of this text input\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholder;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of this text input\n\t * @param value The value for this text input\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this text input is required or not\n\t * @param required Whether this text input is required or not\n\t */\n\tpublic setRequired(required = true) {\n\t\tthis.data.required = required;\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APITextInputComponent {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APITextInputComponent;\n\t}\n\n\tpublic equals(other: UnsafeTextInputBuilder | APITextInputComponent): boolean {\n\t\tif (other instanceof UnsafeTextInputBuilder) {\n\t\t\treturn isEqual(other.data, this.data);\n\t\t}\n\n\t\treturn isEqual(other, this.data);\n\t}\n}\n","import type { APITextInputComponent } from 'discord-api-types/v10';\nimport {\n\tmaxLengthValidator,\n\tminLengthValidator,\n\tplaceholderValidator,\n\trequiredValidator,\n\tvalueValidator,\n\tvalidateRequiredParameters,\n} from './Assertions';\nimport { UnsafeTextInputBuilder } from './UnsafeTextInput';\n\nexport class TextInputBuilder extends UnsafeTextInputBuilder {\n\tpublic override setMinLength(minLength: number) {\n\t\treturn super.setMinLength(minLengthValidator.parse(minLength));\n\t}\n\n\tpublic override setMaxLength(maxLength: number) {\n\t\treturn super.setMaxLength(maxLengthValidator.parse(maxLength));\n\t}\n\n\tpublic override setRequired(required = true) {\n\t\treturn super.setRequired(requiredValidator.parse(required));\n\t}\n\n\tpublic override setValue(value: string) {\n\t\treturn super.setValue(valueValidator.parse(value));\n\t}\n\n\tpublic override setPlaceholder(placeholder: string) {\n\t\treturn super.setPlaceholder(placeholderValidator.parse(placeholder));\n\t}\n\n\tpublic override toJSON(): APITextInputComponent {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);\n\t\treturn super.toJSON();\n\t}\n}\n","import type {\n\tAPIActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIModalInteractionResponseCallbackData,\n} from 'discord-api-types/v10';\nimport { ActionRowBuilder, createComponentBuilder, JSONEncodable, ModalActionRowComponentBuilder } from '../../index';\n\nexport class UnsafeModalBuilder implements JSONEncodable<APIModalInteractionResponseCallbackData> {\n\tpublic readonly data: Partial<APIModalInteractionResponseCallbackData>;\n\tpublic readonly components: ActionRowBuilder<ModalActionRowComponentBuilder>[] = [];\n\n\tpublic constructor({ components, ...data }: Partial<APIModalInteractionResponseCallbackData> = {}) {\n\t\tthis.data = { ...data };\n\t\tthis.components = (components?.map((c) => createComponentBuilder(c)) ??\n\t\t\t[]) as ActionRowBuilder<ModalActionRowComponentBuilder>[];\n\t}\n\n\t/**\n\t * Sets the title of the modal\n\t * @param title The title of the modal\n\t */\n\tpublic setTitle(title: string) {\n\t\tthis.data.title = title;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id of the modal\n\t * @param customId The custom id of this modal\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customId;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds components to this modal\n\t * @param components The components to add to this modal\n\t */\n\tpublic addComponents(\n\t\tcomponents: (\n\t\t\t| ActionRowBuilder<ModalActionRowComponentBuilder>\n\t\t\t| APIActionRowComponent<APIModalActionRowComponent>\n\t\t)[],\n\t) {\n\t\tthis.components.push(\n\t\t\t...components.map((component) =>\n\t\t\t\tcomponent instanceof ActionRowBuilder\n\t\t\t\t\t? component\n\t\t\t\t\t: new ActionRowBuilder<ModalActionRowComponentBuilder>(component),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this modal\n\t * @param components The components to set this modal to\n\t */\n\tpublic setComponents(components: ActionRowBuilder<ModalActionRowComponentBuilder>[]) {\n\t\tthis.components.splice(0, this.components.length, ...components);\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIModalInteractionResponseCallbackData {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIModalInteractionResponseCallbackData;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ActionRowBuilder, type ModalActionRowComponentBuilder } from '../..';\nimport { customIdValidator } from '../../components/Assertions';\n\nexport const titleValidator = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45);\nexport const componentsValidator = s.instance(ActionRowBuilder).array.lengthGreaterThanOrEqual(1);\n\nexport function validateRequiredParameters(\n\tcustomId?: string,\n\ttitle?: string,\n\tcomponents?: ActionRowBuilder<ModalActionRowComponentBuilder>[],\n) {\n\tcustomIdValidator.parse(customId);\n\ttitleValidator.parse(title);\n\tcomponentsValidator.parse(components);\n}\n","import type { APIModalInteractionResponseCallbackData } from 'discord-api-types/v10';\nimport { titleValidator, validateRequiredParameters } from './Assertions';\nimport { UnsafeModalBuilder } from './UnsafeModal';\nimport { customIdValidator } from '../../components/Assertions';\n\nexport class ModalBuilder extends UnsafeModalBuilder {\n\tpublic override setCustomId(customId: string): this {\n\t\treturn super.setCustomId(customIdValidator.parse(customId));\n\t}\n\n\tpublic override setTitle(title: string) {\n\t\treturn super.setTitle(titleValidator.parse(title));\n\t}\n\n\tpublic override toJSON(): APIModalInteractionResponseCallbackData {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.title, this.components);\n\t\treturn super.toJSON();\n\t}\n}\n","import { APISelectMenuOption, ComponentType, type APISelectMenuComponent } from 'discord-api-types/v10';\nimport { UnsafeSelectMenuOptionBuilder } from './UnsafeSelectMenuOption';\nimport { ComponentBuilder } from '../Component';\n\n/**\n * Represents a non-validated select menu component\n */\nexport class UnsafeSelectMenuBuilder extends ComponentBuilder<APISelectMenuComponent> {\n\t/**\n\t * The options within this select menu\n\t */\n\tpublic readonly options: UnsafeSelectMenuOptionBuilder[];\n\n\tpublic constructor(data?: Partial<APISelectMenuComponent>) {\n\t\tconst { options, ...initData } = data ?? {};\n\t\tsuper({ type: ComponentType.SelectMenu, ...initData });\n\t\tthis.options = options?.map((o) => new UnsafeSelectMenuOptionBuilder(o)) ?? [];\n\t}\n\n\t/**\n\t * Sets the placeholder for this select menu\n\t * @param placeholder The placeholder to use for this select menu\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholder;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum values that must be selected in the select menu\n\t * @param minValues The minimum values that must be selected\n\t */\n\tpublic setMinValues(minValues: number) {\n\t\tthis.data.min_values = minValues;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum values that must be selected in the select menu\n\t * @param minValues The maximum values that must be selected\n\t */\n\tpublic setMaxValues(maxValues: number) {\n\t\tthis.data.max_values = maxValues;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom Id for this select menu\n\t * @param customId The custom id to use for this select menu\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customId;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether or not this select menu is disabled\n\t * @param disabled Whether or not this select menu is disabled\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabled;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds options to this select menu\n\t * @param options The options to add to this select menu\n\t * @returns\n\t */\n\tpublic addOptions(options: (UnsafeSelectMenuOptionBuilder | APISelectMenuOption)[]) {\n\t\tthis.options.push(\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof UnsafeSelectMenuOptionBuilder ? option : new UnsafeSelectMenuOptionBuilder(option),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the options on this select menu\n\t * @param options The options to set on this select menu\n\t */\n\tpublic setOptions(options: (UnsafeSelectMenuOptionBuilder | APISelectMenuOption)[]) {\n\t\tthis.options.splice(\n\t\t\t0,\n\t\t\tthis.options.length,\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof UnsafeSelectMenuOptionBuilder ? option : new UnsafeSelectMenuOptionBuilder(option),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APISelectMenuComponent {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t\toptions: this.options.map((o) => o.toJSON()),\n\t\t} as APISelectMenuComponent;\n\t}\n}\n","import type { APISelectMenuComponent, APISelectMenuOption } from 'discord-api-types/v10';\nimport { UnsafeSelectMenuBuilder } from './UnsafeSelectMenu';\nimport { UnsafeSelectMenuOptionBuilder } from './UnsafeSelectMenuOption';\nimport {\n\tcustomIdValidator,\n\tdisabledValidator,\n\tminMaxValidator,\n\toptionsLengthValidator,\n\toptionValidator,\n\tplaceholderValidator,\n\tvalidateRequiredSelectMenuParameters,\n} from '../Assertions';\n\n/**\n * Represents a validated select menu component\n */\nexport class SelectMenuBuilder extends UnsafeSelectMenuBuilder {\n\tpublic override setPlaceholder(placeholder: string) {\n\t\treturn super.setPlaceholder(placeholderValidator.parse(placeholder));\n\t}\n\n\tpublic override setMinValues(minValues: number) {\n\t\treturn super.setMinValues(minMaxValidator.parse(minValues));\n\t}\n\n\tpublic override setMaxValues(maxValues: number) {\n\t\treturn super.setMaxValues(minMaxValidator.parse(maxValues));\n\t}\n\n\tpublic override setCustomId(customId: string) {\n\t\treturn super.setCustomId(customIdValidator.parse(customId));\n\t}\n\n\tpublic override setDisabled(disabled = true) {\n\t\treturn super.setDisabled(disabledValidator.parse(disabled));\n\t}\n\n\tpublic override addOptions(options: (UnsafeSelectMenuOptionBuilder | APISelectMenuOption)[]) {\n\t\toptionsLengthValidator.parse(this.options.length + options.length);\n\t\tthis.options.push(\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof UnsafeSelectMenuOptionBuilder\n\t\t\t\t\t? option\n\t\t\t\t\t: new UnsafeSelectMenuOptionBuilder(optionValidator.parse(option) as APISelectMenuOption),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\tpublic override setOptions(options: (UnsafeSelectMenuOptionBuilder | APISelectMenuOption)[]) {\n\t\toptionsLengthValidator.parse(options.length);\n\t\tthis.options.splice(\n\t\t\t0,\n\t\t\tthis.options.length,\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof UnsafeSelectMenuOptionBuilder\n\t\t\t\t\t? option\n\t\t\t\t\t: new UnsafeSelectMenuOptionBuilder(optionValidator.parse(option) as APISelectMenuOption),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\tpublic override toJSON(): APISelectMenuComponent {\n\t\tvalidateRequiredSelectMenuParameters(this.options, this.data.custom_id);\n\t\treturn super.toJSON();\n\t}\n}\n","import type { APIMessageComponentEmoji, APISelectMenuOption } from 'discord-api-types/v10';\nimport { UnsafeSelectMenuOptionBuilder } from './UnsafeSelectMenuOption';\nimport {\n\tdefaultValidator,\n\temojiValidator,\n\tlabelValueValidator,\n\tvalidateRequiredSelectMenuOptionParameters,\n} from '../Assertions';\n\n/**\n * Represents a validated option within a select menu component\n */\nexport class SelectMenuOptionBuilder extends UnsafeSelectMenuOptionBuilder {\n\tpublic override setDescription(description: string) {\n\t\treturn super.setDescription(labelValueValidator.parse(description));\n\t}\n\n\tpublic override setDefault(isDefault = true) {\n\t\treturn super.setDefault(defaultValidator.parse(isDefault));\n\t}\n\n\tpublic override setEmoji(emoji: APIMessageComponentEmoji) {\n\t\treturn super.setEmoji(emojiValidator.parse(emoji));\n\t}\n\n\tpublic override toJSON(): APISelectMenuOption {\n\t\tvalidateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);\n\t\treturn super.toJSON();\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport is from '@sindresorhus/is';\nimport { type APIApplicationCommandOptionChoice, Locale, LocalizationMap } from 'discord-api-types/v10';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder';\nimport type { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t.regex(/^[\\P{Lu}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u);\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nconst descriptionPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nconst localePredicate = s.nativeEnum(Locale);\n\nexport function validateDescription(description: unknown): asserts description is string {\n\tdescriptionPredicate.parse(description);\n}\n\nconst maxArrayLengthPredicate = s.unknown.array.lengthLessThanOrEqual(25);\nexport function validateLocale(locale: unknown) {\n\treturn localePredicate.parse(locale);\n}\n\nexport function validateMaxOptionsLength(options: unknown): asserts options is ToAPIApplicationCommandOptions[] {\n\tmaxArrayLengthPredicate.parse(options);\n}\n\nexport function validateRequiredParameters(\n\tname: string,\n\tdescription: string,\n\toptions: ToAPIApplicationCommandOptions[],\n) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert description conditions\n\tvalidateDescription(description);\n\n\t// Assert options conditions\n\tvalidateMaxOptionsLength(options);\n}\n\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateRequired(required: unknown): asserts required is boolean {\n\tbooleanPredicate.parse(required);\n}\n\nconst choicesLengthPredicate = s.number.lessThanOrEqual(25);\n\nexport function validateChoicesLength(amountAdding: number, choices?: APIApplicationCommandOptionChoice[]): void {\n\tchoicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n\nexport function assertReturnOfBuilder<\n\tT extends ApplicationCommandOptionBase | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder,\n>(input: unknown, ExpectedInstanceOf: new () => T): asserts input is T {\n\tconst instanceName = ExpectedInstanceOf.name;\n\n\tif (is.nullOrUndefined(input)) {\n\t\tthrow new TypeError(\n\t\t\t`Expected to receive a ${instanceName} builder, got ${input === null ? 'null' : 'undefined'} instead.`,\n\t\t);\n\t}\n\n\tif (is.primitive(input)) {\n\t\tthrow new TypeError(`Expected to receive a ${instanceName} builder, got a primitive (${typeof input}) instead.`);\n\t}\n\n\tif (!(input instanceof ExpectedInstanceOf)) {\n\t\tconst casted = input as Record<PropertyKey, unknown>;\n\n\t\tconst constructorName = is.function_(input) ? input.name : casted.constructor.name;\n\t\tconst stringTag = Reflect.get(casted, Symbol.toStringTag) as string | undefined;\n\n\t\tconst fullResultName = stringTag ? `${constructorName} [${stringTag}]` : constructorName;\n\n\t\tthrow new TypeError(`Expected to receive a ${instanceName} builder, got ${fullResultName} instead.`);\n\t}\n}\n\nexport const localizationMapPredicate = s.object<LocalizationMap>(\n\tObject.fromEntries(Object.values(Locale).map((locale) => [locale, s.string.nullish])),\n).strict.nullish;\n\nexport function validateLocalizationMap(value: unknown): asserts value is LocalizationMap {\n\tlocalizationMapPredicate.parse(value);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n","import type {\n\tAPIApplicationCommandOption,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport {\n\tassertReturnOfBuilder,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDefaultPermission,\n\tvalidateLocalizationMap,\n\tvalidateDMPermission,\n\tvalidateMaxOptionsLength,\n\tvalidateRequiredParameters,\n} from './Assertions';\nimport { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions';\n\n@mix(SharedSlashCommandOptions, SharedNameAndDescription)\nexport class SlashCommandBuilder {\n\t/**\n\t * The name of this slash command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The localized names for this command\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The description of this slash command\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The localized descriptions for this command\n\t */\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * The options of this slash command\n\t */\n\tpublic readonly options: ToAPIApplicationCommandOptions[] = [];\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @deprecated This property is deprecated and will be removed in the future.\n\t * You should use `setDefaultMemberPermissions` or `setDMPermission` instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Set of permissions represented as a bit set for the command\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * **Note:** Calling this function will validate required properties based on their conditions.\n\t */\n\tpublic toJSON(): RESTPostAPIApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\treturn {\n\t\t\t...this,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * **Note**: If set to `false`, you will have to later `PUT` the permissions for this command.\n\t *\n\t * @param value Whether or not to enable this command by default\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t * @deprecated Use `setDefaultMemberPermissions` or `setDMPermission` instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run the command.\n\t *\n\t * **Note:** You can set this to `'0'` to disable the command by default.\n\t *\n\t * @param permissions The permissions bit field to set\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t *\n\t * @param enabled If the command should be enabled in DMs\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand group to this command\n\t *\n\t * @param input A function that returns a subcommand group builder, or an already built builder\n\t */\n\tpublic addSubcommandGroup(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandGroupBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandGroupBuilder) => SlashCommandSubcommandGroupBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand to this command\n\t *\n\t * @param input A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n\nexport interface SlashCommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions {}\n\nexport interface SlashCommandSubcommandsOnlyBuilder\n\textends SharedNameAndDescription,\n\t\tPick<SlashCommandBuilder, 'toJSON' | 'addSubcommand' | 'addSubcommandGroup'> {}\n\nexport interface SlashCommandOptionsOnlyBuilder\n\textends SharedNameAndDescription,\n\t\tSharedSlashCommandOptions,\n\t\tPick<SlashCommandBuilder, 'toJSON'> {}\n\nexport interface ToAPIApplicationCommandOptions {\n\ttoJSON: () => APIApplicationCommandOption;\n}\n","import {\n\tAPIApplicationCommandSubcommandGroupOption,\n\tAPIApplicationCommandSubcommandOption,\n\tApplicationCommandOptionType,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { assertReturnOfBuilder, validateMaxOptionsLength, validateRequiredParameters } from './Assertions';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions';\n\n/**\n * Represents a folder for subcommands\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription)\nexport class SlashCommandSubcommandGroupBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand group\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand group\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The subcommands part of this subcommand group\n\t */\n\tpublic readonly options: SlashCommandSubcommandBuilder[] = [];\n\n\t/**\n\t * Adds a new subcommand to this group\n\t *\n\t * @param input A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t) {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandSubcommandGroupOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.SubcommandGroup,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandGroupBuilder extends SharedNameAndDescription {}\n\n/**\n * Represents a subcommand\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription, SharedSlashCommandOptions)\nexport class SlashCommandSubcommandBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The options of this subcommand\n\t */\n\tpublic readonly options: ApplicationCommandOptionBase[] = [];\n\n\tpublic toJSON(): APIApplicationCommandSubcommandOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.Subcommand,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions<false> {}\n","import type { LocaleString, LocalizationMap } from 'discord-api-types/v10';\nimport { validateDescription, validateLocale, validateName } from '../Assertions';\n\nexport class SharedNameAndDescription {\n\tpublic readonly name!: string;\n\tpublic readonly name_localizations?: LocalizationMap;\n\tpublic readonly description!: string;\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name The name\n\t */\n\tpublic setName(name: string): this {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description\n\t *\n\t * @param description The description\n\t */\n\tpublic setDescription(description: string) {\n\t\t// Assert the description matches the conditions\n\t\tvalidateDescription(description);\n\n\t\tReflect.set(this, 'description', description);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization\n\t *\n\t * @param locale The locale to set a description for\n\t * @param localizedName The localized description for the given locale\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations\n\t *\n\t * @param localizedNames The dictionary of localized descriptions to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tObject.entries(localizedNames).forEach((args) =>\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null])),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a description localization\n\t *\n\t * @param locale The locale to set a description for\n\t * @param localizedDescription The localized description for the given locale\n\t */\n\tpublic setDescriptionLocalization(locale: LocaleString, localizedDescription: string | null) {\n\t\tif (!this.description_localizations) {\n\t\t\tReflect.set(this, 'description_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedDescription === null) {\n\t\t\tthis.description_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateDescription(localizedDescription);\n\n\t\tthis.description_localizations![parsedLocale] = localizedDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description localizations\n\t *\n\t * @param localizedDescriptions The dictionary of localized descriptions to set\n\t */\n\tpublic setDescriptionLocalizations(localizedDescriptions: LocalizationMap | null) {\n\t\tif (localizedDescriptions === null) {\n\t\t\tReflect.set(this, 'description_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'description_localizations', {});\n\t\tObject.entries(localizedDescriptions).forEach((args) =>\n\t\t\tthis.setDescriptionLocalization(...(args as [LocaleString, string | null])),\n\t\t);\n\t\treturn this;\n\t}\n}\n","import { APIApplicationCommandAttachmentOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandAttachmentOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Attachment as const;\n\n\tpublic toJSON(): APIApplicationCommandAttachmentOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import type { APIApplicationCommandBasicOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { SharedNameAndDescription } from './NameAndDescription';\nimport { validateRequiredParameters, validateRequired, validateLocalizationMap } from '../Assertions';\n\nexport abstract class ApplicationCommandOptionBase extends SharedNameAndDescription {\n\tpublic abstract readonly type: ApplicationCommandOptionType;\n\n\tpublic readonly required: boolean = false;\n\n\t/**\n\t * Marks the option as required\n\t *\n\t * @param required If this option should be required\n\t */\n\tpublic setRequired(required: boolean) {\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(required);\n\n\t\tReflect.set(this, 'required', required);\n\n\t\treturn this;\n\t}\n\n\tpublic abstract toJSON(): APIApplicationCommandBasicOption;\n\n\tprotected runRequiredValidations() {\n\t\tvalidateRequiredParameters(this.name, this.description, []);\n\n\t\t// Validate localizations\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(this.required);\n\t}\n}\n","import { APIApplicationCommandBooleanOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandBooleanOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Boolean as const;\n\n\tpublic toJSON(): APIApplicationCommandBooleanOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { APIApplicationCommandChannelOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionChannelTypesMixin } from '../mixins/ApplicationCommandOptionChannelTypesMixin';\n\n@mix(ApplicationCommandOptionChannelTypesMixin)\nexport class SlashCommandChannelOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Channel as const;\n\n\tpublic toJSON(): APIApplicationCommandChannelOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandChannelOption extends ApplicationCommandOptionChannelTypesMixin {}\n","import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildNews,\n\tChannelType.GuildNewsThread,\n\tChannelType.GuildPublicThread,\n\tChannelType.GuildPrivateThread,\n\tChannelType.GuildStageVoice,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes The channel types to add\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { APIApplicationCommandIntegerOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin';\n\nconst numberValidator = s.number.int;\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandIntegerOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Integer as const;\n\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandIntegerOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandIntegerOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","export abstract class ApplicationCommandNumericOptionMinMaxValueMixin {\n\tpublic readonly max_value?: number;\n\tpublic readonly min_value?: number;\n\n\t/**\n\t * Sets the maximum number value of this option\n\t * @param max The maximum value this option can be\n\t */\n\tpublic abstract setMaxValue(max: number): this;\n\n\t/**\n\t * Sets the minimum number value of this option\n\t * @param min The minimum value this option can be\n\t */\n\tpublic abstract setMinValue(min: number): this;\n}\n","import { s } from '@sapphire/shapeshift';\nimport { APIApplicationCommandOptionChoice, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { localizationMapPredicate, validateChoicesLength } from '../Assertions';\n\nconst stringPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nconst numberPredicate = s.number.greaterThan(-Infinity).lessThan(Infinity);\nconst choicesPredicate = s.object({\n\tname: stringPredicate,\n\tname_localizations: localizationMapPredicate,\n\tvalue: s.union(stringPredicate, numberPredicate),\n}).array;\nconst booleanPredicate = s.boolean;\n\nexport class ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T extends string | number> {\n\tpublic readonly choices?: APIApplicationCommandOptionChoice<T>[];\n\tpublic readonly autocomplete?: boolean;\n\n\t// Since this is present and this is a mixin, this is needed\n\tpublic readonly type!: ApplicationCommandOptionType;\n\n\t/**\n\t * Adds multiple choices for this option\n\t *\n\t * @param choices The choices to add\n\t */\n\tpublic addChoices(...choices: APIApplicationCommandOptionChoice<T>[]): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tif (this.choices === undefined) {\n\t\t\tReflect.set(this, 'choices', []);\n\t\t}\n\n\t\tvalidateChoicesLength(choices.length, this.choices);\n\n\t\tfor (const { name, name_localizations, value } of choices) {\n\t\t\t// Validate the value\n\t\t\tif (this.type === ApplicationCommandOptionType.String) {\n\t\t\t\tstringPredicate.parse(value);\n\t\t\t} else {\n\t\t\t\tnumberPredicate.parse(value);\n\t\t\t}\n\n\t\t\tthis.choices!.push({ name, name_localizations, value });\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tpublic setChoices<Input extends APIApplicationCommandOptionChoice<T>[]>(...choices: Input): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tReflect.set(this, 'choices', []);\n\t\tthis.addChoices(...choices);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Marks the option as autocompletable\n\t * @param autocomplete If this option should be autocompletable\n\t */\n\tpublic setAutocomplete(autocomplete: boolean): this {\n\t\t// Assert that you actually passed a boolean\n\t\tbooleanPredicate.parse(autocomplete);\n\n\t\tif (autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tReflect.set(this, 'autocomplete', autocomplete);\n\n\t\treturn this;\n\t}\n}\n","import { APIApplicationCommandMentionableOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandMentionableOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Mentionable as const;\n\n\tpublic toJSON(): APIApplicationCommandMentionableOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { APIApplicationCommandNumberOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin';\n\nconst numberValidator = s.number;\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandNumberOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Number as const;\n\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandNumberOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandNumberOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","import { APIApplicationCommandRoleOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandRoleOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Role as const;\n\n\tpublic toJSON(): APIApplicationCommandRoleOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { APIApplicationCommandStringOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin';\n\n@mix(ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandStringOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.String as const;\n\n\tpublic toJSON(): APIApplicationCommandStringOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandStringOption extends ApplicationCommandOptionWithChoicesAndAutocompleteMixin<string> {}\n","import { APIApplicationCommandUserOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase';\n\nexport class SlashCommandUserOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.User as const;\n\n\tpublic toJSON(): APIApplicationCommandUserOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import type { ApplicationCommandOptionBase } from './ApplicationCommandOptionBase';\nimport { assertReturnOfBuilder, validateMaxOptionsLength } from '../Assertions';\nimport type { ToAPIApplicationCommandOptions } from '../SlashCommandBuilder';\nimport { SlashCommandAttachmentOption } from '../options/attachment';\nimport { SlashCommandBooleanOption } from '../options/boolean';\nimport { SlashCommandChannelOption } from '../options/channel';\nimport { SlashCommandIntegerOption } from '../options/integer';\nimport { SlashCommandMentionableOption } from '../options/mentionable';\nimport { SlashCommandNumberOption } from '../options/number';\nimport { SlashCommandRoleOption } from '../options/role';\nimport { SlashCommandStringOption } from '../options/string';\nimport { SlashCommandUserOption } from '../options/user';\n\nexport class SharedSlashCommandOptions<ShouldOmitSubcommandFunctions = true> {\n\tpublic readonly options!: ToAPIApplicationCommandOptions[];\n\n\t/**\n\t * Adds a boolean option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addBooleanOption(\n\t\tinput: SlashCommandBooleanOption | ((builder: SlashCommandBooleanOption) => SlashCommandBooleanOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n\t}\n\n\t/**\n\t * Adds a user option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addUserOption(input: SlashCommandUserOption | ((builder: SlashCommandUserOption) => SlashCommandUserOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandUserOption);\n\t}\n\n\t/**\n\t * Adds a channel option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addChannelOption(\n\t\tinput: SlashCommandChannelOption | ((builder: SlashCommandChannelOption) => SlashCommandChannelOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n\t}\n\n\t/**\n\t * Adds a role option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addRoleOption(input: SlashCommandRoleOption | ((builder: SlashCommandRoleOption) => SlashCommandRoleOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n\t}\n\n\t/**\n\t * Adds an attachment option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addAttachmentOption(\n\t\tinput: SlashCommandAttachmentOption | ((builder: SlashCommandAttachmentOption) => SlashCommandAttachmentOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);\n\t}\n\n\t/**\n\t * Adds a mentionable option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addMentionableOption(\n\t\tinput: SlashCommandMentionableOption | ((builder: SlashCommandMentionableOption) => SlashCommandMentionableOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n\t}\n\n\t/**\n\t * Adds a string option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addStringOption(\n\t\tinput:\n\t\t\t| SlashCommandStringOption\n\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandStringOption,\n\t\t\t  ) =>\n\t\t\t\t\t| SlashCommandStringOption\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandStringOption);\n\t}\n\n\t/**\n\t * Adds an integer option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addIntegerOption(\n\t\tinput:\n\t\t\t| SlashCommandIntegerOption\n\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandIntegerOption,\n\t\t\t  ) =>\n\t\t\t\t\t| SlashCommandIntegerOption\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n\t}\n\n\t/**\n\t * Adds a number option\n\t *\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addNumberOption(\n\t\tinput:\n\t\t\t| SlashCommandNumberOption\n\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandNumberOption,\n\t\t\t  ) =>\n\t\t\t\t\t| SlashCommandNumberOption\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n\t}\n\n\tprivate _sharedAddOptionMethod<T extends ApplicationCommandOptionBase>(\n\t\tinput:\n\t\t\t| T\n\t\t\t| Omit<T, 'setAutocomplete'>\n\t\t\t| Omit<T, 'addChoices'>\n\t\t\t| ((builder: T) => T | Omit<T, 'setAutocomplete'> | Omit<T, 'addChoices'>),\n\t\tInstance: new () => T,\n\t): ShouldOmitSubcommandFunctions extends true ? Omit<this, 'addSubcommand' | 'addSubcommandGroup'> : this {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new Instance()) : input;\n\n\t\tassertReturnOfBuilder(result, Instance);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandType } from 'discord-api-types/v10';\nimport type { ContextMenuCommandType } from './ContextMenuCommandBuilder';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t.regex(/^( *[\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+ *)+$/u);\n\nconst typePredicate = s.union(s.literal(ApplicationCommandType.User), s.literal(ApplicationCommandType.Message));\n\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nexport function validateType(type: unknown): asserts type is ContextMenuCommandType {\n\ttypePredicate.parse(type);\n}\n\nexport function validateRequiredParameters(name: string, type: number) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert type is valid\n\tvalidateType(type);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n","import type {\n\tApplicationCommandType,\n\tLocaleString,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport {\n\tvalidateRequiredParameters,\n\tvalidateName,\n\tvalidateType,\n\tvalidateDefaultPermission,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDMPermission,\n} from './Assertions';\nimport { validateLocale, validateLocalizationMap } from '../slashCommands/Assertions';\n\nexport class ContextMenuCommandBuilder {\n\t/**\n\t * The name of this context menu command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The localized names for this command\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The type of this context menu command\n\t */\n\tpublic readonly type: ContextMenuCommandType = undefined!;\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @deprecated This property is deprecated and will be removed in the future.\n\t * You should use `setDefaultMemberPermissions` or `setDMPermission` instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Set of permissions represented as a bit set for the command\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name The name\n\t */\n\tpublic setName(name: string) {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the type\n\t *\n\t * @param type The type\n\t */\n\tpublic setType(type: ContextMenuCommandType) {\n\t\t// Assert the type is valid\n\t\tvalidateType(type);\n\n\t\tReflect.set(this, 'type', type);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * **Note**: If set to `false`, you will have to later `PUT` the permissions for this command.\n\t *\n\t * @param value Whether or not to enable this command by default\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t * @deprecated Use `setDefaultMemberPermissions` or `setDMPermission` instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run the command.\n\t *\n\t * **Note:** You can set this to `'0'` to disable the command by default.\n\t *\n\t * @param permissions The permissions bit field to set\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t *\n\t * @param enabled If the command should be enabled in DMs\n\t *\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization\n\t *\n\t * @param locale The locale to set a description for\n\t * @param localizedName The localized description for the given locale\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations\n\t *\n\t * @param localizedNames The dictionary of localized descriptions to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tObject.entries(localizedNames).forEach((args) =>\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null])),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * **Note:** Calling this function will validate required properties based on their conditions.\n\t */\n\tpublic toJSON(): RESTPostAPIApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.type);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\n\t\treturn { ...this };\n\t}\n}\n\nexport type ContextMenuCommandType = ApplicationCommandType.User | ApplicationCommandType.Message;\n","export interface JSONEncodable<T> {\n\t/**\n\t * Transforms this object to its JSON format\n\t */\n\ttoJSON: () => T;\n}\n\n/**\n * Indicates if an object is encodable or not.\n * @param maybeEncodable The object to check against\n */\nexport function isJSONEncodable(maybeEncodable: unknown): maybeEncodable is JSONEncodable<unknown> {\n\treturn maybeEncodable !== null && typeof maybeEncodable === 'object' && 'toJSON' in maybeEncodable;\n}\n","export interface Equatable<T> {\n\t/**\n\t * Whether or not this is equal to another structure\n\t */\n\tequals: (other: T) => boolean;\n}\n\n/**\n * Indicates if an object is equatable or not.\n * @param maybeEquatable The object to check against\n */\nexport function isEquatable(maybeEquatable: unknown): maybeEquatable is Equatable<unknown> {\n\treturn maybeEquatable !== null && typeof maybeEquatable === 'object' && 'equals' in maybeEquatable;\n}\n","import type { APIEmbed } from 'discord-api-types/v10';\n\nexport function embedLength(data: APIEmbed) {\n\treturn (\n\t\t(data.title?.length ?? 0) +\n\t\t(data.description?.length ?? 0) +\n\t\t(data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) +\n\t\t(data.footer?.text.length ?? 0) +\n\t\t(data.author?.name.length ?? 0)\n\t);\n}\n"],"mappings":"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","names":[]}